{
    "Webpage":{
        "code_no_error_single_image": "{previous code}\n\nYou are an expert in web development using HTML and CSS.  The image shown to you is a screenshot of a webpage. \nThe HTML code shown above is written to produce an image as similar to the shown image as possible. \nYour job is to first judge whether you are able modify the code to produce a more similar image with the image. \nIf you think you are able to do it, then respond \"true\" in the first line and write the code in the following lines; otherwise if you think the code is nearly perfect or you cannot figure out a way to improve it, respond \"false\" in the first line and do not respond with anything else.\n\nIf you write code, you need to ensure that the new webpage produced by your code visually matches the provided image as closely as possible. \nThe code must start with <!DOCTYPE html> and end with </html>, fully include all texts from the first image, and use CSS to accurately control the styles, including colors and the relative positioning of elements. The HTML file should be self-contained, including all CSS code, not dependent on any external files, and no JavaScript is required for dynamic interactions. Be sure to accurately replicate every element's size, text, position, color, and the overall layout of the webpage.",
        "code_error_single_image":"{previous code}\n\nYou are an expert in web development using HTML and CSS.  \nThe image shown to you is a screenshot of a webpage. \nThe HTML code shown above is written to produce an image as similar to the shown image as possible.\nHowever, the code encounters an error: {error message}\n\nYour job is to debug the code, and also modify the code to produce a more similar image with the shown image, if this is possible. \nYou need to ensure that the new webpage produced by your code visually matches the provided image as closely as possible. \nThe code must start with <!DOCTYPE html> and end with </html>, fully include all texts from the image, and use CSS to accurately control the styles, including colors and the relative positioning of elements. The HTML file should be self-contained, including all CSS code, not dependent on any external files, and no JavaScript is required for dynamic interactions. Be sure to accurately replicate every element's size, text, position, color, and the overall layout of the webpage.\n",
        "code_no_error_two_image":"{previous code}\n\nYou are an expert in web development using HTML and CSS. \nThe first image shown to you is a screenshot of a webpage, and the second image is produced by the HTML code shown above. \nYour job is to first judge whether you are able modify the code to produce a more similar image with the first image.\nIf you think you are able to do it, then respond \"true\" in the first line and write the code in the following lines; otherwise if you think the code is nearly perfect or you cannot figure out a way to improve it, respond \"false\" in the first line and do not respond with anything else.\n\nIf you write code, you need to ensure that the webpage produced by the code visually matches the first image as closely as possible. \nThe code must start with <!DOCTYPE html> and end with </html>, fully include all texts from the first image, and use CSS to accurately control the styles, including colors and the relative positioning of elements. The HTML file should be self-contained, including all CSS code, not dependent on any external files, and no JavaScript is required for dynamic interactions. Be sure to accurately replicate every element's size, text, position, color, and the overall layout of the first image.\n"
    },
    "Matplotlib":{
        "code_no_error_single_image":"{previous code}\n\nYou are an expert in data visualization using Python's matplotlib library. \nThe image shown to you is a screenshot of a figure. The Python code shown above is written to produce a figure as similar to the shown image as possible. \nYour job is to first judge whether you are able to modify the code to produce a more similar image with the image. If you think you are able to do it, then respond \"true\" in the first line and write the code in the following lines; otherwise if you think the code is nearly perfect or you cannot figure out a way to improve it, respond \"false\" in the first line and do not respond with anything else.\nIf you write code, you need to ensure that the new figure produced by your code visually matches the provided image as closely as possible. The code must import necessary libraries and include complete functionality to recreate the figure. Ensure the new figure visually matches the provided image as closely as possible, including title, axis labels, legend text, style of axes, position of the legend, line styles, and background color. Precisely restore the relative positions, shapes, and values of the data points to ensure that the data presentation strictly corresponds with the provided image.\nYou must write the code starting with ```python and ending with ``` . For example:\n```python\n# Insert your code here\n```\n",
        "code_error_single_image":"{previous code}\n\nYou are an expert in data visualization using Python's matplotlib library. \nThe image shown to you is a screenshot of a figure. The Python code shown above is written to produce a figure as similar to the shown image as possible. \nHowever, the code encounters an error: {error message}\nYour job is to debug the code, and also modify the code to produce a more similar image with the shown image, if this is possible.\nyou need to ensure that the new figure produced by your code visually matches the provided image as closely as possible. \nThe code must import necessary libraries and include complete functionality to recreate the figure. Ensure the new figure visually matches the provided image as closely as possible, including title, axis labels, legend text, style of axes, position of the legend, line styles, and background color. Precisely restore the relative positions, shapes, and values of the data points to ensure that the data presentation strictly corresponds with the provided image.\nYou must write the code starting with ```python and ending with ``` . For example:\n```python\n# Insert your code here\n```\n",
        "code_no_error_two_image":"{previous code}\n\nYou are an expert in data visualization using Python's matplotlib library. \nThe first image shown to you is a screenshot of a figure, and the second image is produced by the python code shown above. \nYour job is to first judge whether you are able modify the code to produce a more similar image with the first image.\nIf you think you are able to do it, then respond \"true\" in the first line and write the code in the following lines; otherwise if you think the code is nearly perfect or you cannot figure out a way to improve it, respond \"false\" in the first line and do not respond with anything else.\nIf you write code, you need to ensure that the figure produced by the code visually matches the first image as closely as possible. \nThe code must import necessary libraries and include complete functionality to recreate the figure. Ensure the new figure visually matches the provided image as closely as possible, including title, axis labels, legend text, style of axes, position of the legend, line styles, and background color. Precisely restore the relative positions, shapes, and values of the data points to ensure that the data presentation strictly corresponds with the provided image.\nYou must write the code starting with ```python and ending with ``` . For example:\n```python\n# Insert your code here\n```\n"
    },
    "TikZ":{
        "code_no_error_single_image":"{previous code}\n\nYou are an expert in creating graphics using TikZ in LaTeX. \nThe image shown to you is a graphics created using TikZ.\nThe TikZ code shown above is written to produce an image as similar to the shown image as possible. \nYour job is to first judge whether you are able modify the code to produce a more similar image with the image. \nIf you think you are able to do it, then respond \"true\" in the first line and write the code in the following lines; otherwise if you think the code is nearly perfect or you cannot figure out a way to improve it, respond \"false\" in the first line and do not respond with anything else.\nIf you write code, ensure that the new graphic produced by your code visually matches the provided graphic as closely as possible. The code must include all necessary TikZ commands and parameters to precisely replicate the details and must start with \\documentclass and end with \\end{document}. If the code relies on specific TikZ libraries or LaTeX packages, import these libraries or packages in the preamble of your document. For example, if you use the positioning or shapes.geometric libraries to enhance the layout or shapes of the graphics, import them after \\documentclass with commands like \\usetikzlibrary{positioning} or \\usetikzlibrary{shapes.geometric}.\n",
        "code_error_single_image":"{previous code}\n\nYou are an expert in creating graphics using TikZ in LaTeX. \nThe image shown to you is a graphics created using TikZ.\nThe TikZ code shown above is written to produce an image as similar to the shown image as possible. \nHowever, the code encounters an error: {error message}\n\nYour job is to debug the code, and also modify the code to produce a more similar image with the shown image, if this is possible. \nYou need to ensure that the new diagram produced by your code visually matches the provided image as closely as possible. \nThe code must include all necessary TikZ commands and parameters to precisely replicate the details and must start with \\documentclass and end with \\end{document}. If the code relies on specific TikZ libraries or LaTeX packages, import these libraries or packages in the preamble of your document. For example, if you use the positioning or shapes.geometric libraries to enhance the layout or shapes of the graphics, import them after \\documentclass with commands like \\usetikzlibrary{positioning} or \\usetikzlibrary{shapes.geometric}.\n",
        "code_no_error_two_image":"{previous code}\n\nYou are an expert in creating graphics using TikZ in LaTeX. \nThe first image shown to you is a graphics created using TikZ, and the second image is produced by the TikZ code shown above. \nYour job is to first judge whether you are able modify the code to produce a more similar image with the first image.\nIf you think you are able to do it, then respond \"true\" in the first line and write the code in the following lines; otherwise if you think the code is nearly perfect or you cannot figure out a way to improve it, respond \"false\" in the first line and do not respond with anything else.\nIf you write code, you need to ensure that the graphic produced by the code visually matches the first graphic as closely as possible. The code should accurately reproduce all visual elements from the first graphic, including geometric shapes, colors, layouts, and text content. Adjust the proportions of the elements, their relative positions, and color settings to ensure the generated graphic faithfully reproduces the first graphic.The code must include all necessary TikZ commands and parameters to precisely replicate the details and must start with \\documentclass and end with \\end{document}. If the code relies on specific TikZ libraries or LaTeX packages, import these libraries or packages in the preamble of your document. For example, if you use the positioning or shapes.geometric libraries to enhance the layout or shapes of the graphics, import them after \\documentclass with commands like \\usetikzlibrary{positioning} or \\usetikzlibrary{shapes.geometric}.\n",
        "code_error_two_image":"{previous code}\n\nYou are an expert in creating graphics using TikZ in LaTeX. \nThe first image shown to you is a graphic created using TikZ, and the second image is produced by the TikZ code shown above, which is written to make the image as similar to the first image as possible.\nHowever, the code encounters an error: {error message}\n\n\nYour job is to debug the code, and also modify the code to produce a more similar image with the first image, if this is possible. \nIf you think you are able to do it, then respond \"true\" in the first line and write the code in the following lines; otherwise if you think the code is nearly perfect or you cannot figure out a way to improve it, respond \"false\" in the first line and do not respond with anything else.\nIf you write code, you need to ensure that the graphic produced by the code visually matches the first graphic as closely as possible. The code should accurately reproduce all visual elements from the graphic, including geometric shapes, colors, layouts, and text content. Adjust the proportions of the elements, their relative positions, and color settings to ensure the generated graphic faithfully reproduces the original graphic.\nThe code must include all necessary TikZ commands and parameters to precisely replicate the details and must start with \\documentclass and end with \\end{document}. If the code relies on specific TikZ libraries or LaTeX packages, import these libraries or packages in the preamble of your document. For example, if you use the positioning or shapes.geometric libraries to enhance the layout or shapes of the graphics, import them after \\documentclass with commands like \\usetikzlibrary{positioning} or \\usetikzlibrary{shapes.geometric}.\n"
    },
    "SVG":{
        "code_no_error_single_image":"{previous code}\n\nYou are an expert in creating scalable vector graphics using XML.\nThe image shown to you is a screenshot of an SVG graphic created using XML. \nThe xml code shown above is written to produce an image as similar to the shown image as possible. \nYour job is to first judge whether you are able modify the code to produce a more similar image with the image. \nIf you think you are able to do it, then respond \"true\" in the first line and write the code in the following lines; otherwise if you think the code is nearly perfect or you cannot figure out a way to improve it, respond \"false\" in the first line and do not respond with anything else.\n\nIf you write code, you need to ensure that the new SVG graphic produced by your code visually matches the provided image as closely as possible.\n\n",
        "code_error_single_image":"{previous code}\n\nYou are an expert in creating scalable vector graphics using XML.  \nThe image shown to you is a screenshot of an SVG graphic created using XML. \nThe xml code shown above is written to produce an image as similar to the shown image as possible. \nHowever, the code encounters an error: {error message}\n\nYour job is to debug the code, and also modify the code to produce a more similar image with the shown image, if this is possible. \nYou need to ensure that the new SVG graphic produced by your code visually matches the provided image as closely as possible. \n",
        "code_no_error_two_image":"\n{previous code}\n\nYou are an expert in creating scalable vector graphics using XML.  \nThe first image shown to you is a screenshot of an SVG graphic, and the second image is produced by the xml code shown above. \nYour job is to first judge whether you are able modify the code to produce a more similar image with the first image.\nIf you think you are able to do it, then respond \"true\" in the first line and write the code in the following lines; otherwise if you think the code is nearly perfect or you cannot figure out a way to improve it, respond \"false\" in the first line and do not respond with anything else.\n\nIf you write code, you need to ensure that the SVG graphic produced by the code visually matches the first image as closely as possible. \n"
    },
    "HumanEval-V":{
        "code_no_error_single_image":"{previous code}\n\nThe code shown above is written to address the problem shown in the image.\nYour job is to determine whether you can modify the code to better solve the problem depicted in the image. If you believe you can improve the code, respond with \"true\" in the first line and write your revised code in the lines that follow. If you think the code is nearly perfect or you cannot identify any improvements, respond with \"false\" in the first line and do not add anything else.\nIf you write code, it must be formatted as follows: start with ```python and end with ```. For example:\n```python\n# Insert your code here\n```\n",
        "code_error_single_image":"{previous code}\n\nThe code shown above is written to address the problem shown in the image.\nHowever, the code encounters an error: {error message}\n\n\nYour job is to debug the code,  and modify the code to better address the problem depicted in the image, if this is possible.\nYou must write the revised code, begin with ```python and end with ```. For example:\n```python\n# Insert your code here\n```\n"
    },
    "MBPP-V":{
        "code_no_error_single_image":"{previous code}\n\nThe code shown above is written to address the problem shown in the image.\nYour job is to determine whether you can modify the code to better solve the problem depicted in the image. If you believe you can improve the code, respond with \"true\" in the first line and write your revised code in the lines that follow. If you think the code is nearly perfect or you cannot identify any improvements, respond with \"false\" in the first line and do not add anything else.\nIf you write code, the code you modify must be in the form of a function '{function_signature}', designed to solve the problem shown in the image.\nEnsure your code start with ```python and end with ``` . Here's an example of how you might write this function:\n```python\ndef {function_signature}:\n    # Insert your code here\n    return answer  # Return the appropriate value depending on the type of problem\n```\n",
        "code_error_single_image":"{previous code}\n\nThe code shown above is written to address the problem shown in the image.\nHowever, the code encounters error: {error message}\nYour job is to debug the code,  and modify the code to better address the problem depicted in the image, if this is possible.\nThe code you modify must be in the form of a function  '{function_signature}', designed to solve the problem shown in the image.\nEnsure your code start with ```python and end with ``` . Here's an example of how you might write this function:\n```python\ndef {function_signature}:\n    # Insert your code here\n    return answer  # Return the appropriate value depending on the type of problem\n```\n"
    },
    "GSM8K-V":{
        "code_no_error_single_image":"{previous code}\n\nThe code shown above is written to address the problem shown in the image.\nYour job is to determine whether you can modify the code to better solve the problem depicted in the image. If you believe you can improve the code, respond with \"true\" in the first line and write your revised code in the lines that follow. If you think the code is nearly perfect or you cannot identify any improvements, respond with \"false\" in the first line and do not add anything else.\nIf you write code, you must write the revised code in the form of a function named get_answer. This function should not take any inputs and must return the final answer to the problem. Ensure your code start with ```python and end with ``` . For example:\n```python\ndef get_answer():\n    # Insert your code here\n```\n",
        "code_error_single_image":"\n{previous code}\n\nThe code shown above is written to address the problem shown in the image.\nHowever, the code encounters an error: {error message}\n\n\nYour job is to debug the code,  and modify the code to better address the problem depicted in the image, if this is possible.\nYou must write the revised code in the form of a function named get_answer. This function should not take any inputs and must return the final answer to the problem. Ensure your code start with ```python and end with ``` . For example:\n```python\ndef get_answer():\n    # Insert your code here\n```\n"
    },
    "VP":{
        "code_no_error_single_image":"{Image Patch}\n\nThe ocr result of the image:\n{Ocr result}\n\nquery:{orignal query}\n\nAccording to the image shown, write a Python function using the ImagePatch class (above) that can be executed to provide an answer to the query.\n\nHere is a code to attempt to solve the above query:\n{previous code}\n\nYour job is to determine whether the code can be modified to better address the query. If you believe improvements can be made, respond with \"true\" in the first line and write your revised code below that. If you think the code is nearly perfect or if no improvements can be identified, respond with \"false\" in the first line and add nothing else.\nIf you write code, you must consider the following guidelines to revise this code:\n- Your program should be based on the contents of the image. You should first look at it and then program.\n- Use base Python (comparison, sorting) for basic logical operations, left/right/up/down, math, etc.\n- Use the llm_query function to access external information and answer informational questions not concerning the image.\n- When you use the OCR function, you should first see the ocr result and then design the program, to make sure you understand the structure of the ocr result (for example, observe '\n' to identify how many lines there are, and which elements are on the same lines).\n- Remember that the ocr results give all texts in the image in raw markdown format showing the original code, without any processing, shown in only one codeblock. The texts are described in the reading form, from the upper-left to the bottom-right. All variables, formulas and words with subscripts or superscripts should be shown in latex form wrapped in '$'.\n- If you believe you can answer the question directly or find it difficult to get the correct answer using the provided API, you don't have to use the provided API. However, you still need to write your answer in Python code!\n- You must write the code in the form of a function named execute_command. This function must return the final answer to the query. Ensure your code start with ```python and end with ``` . For example:\n```python\ndef execute_command(image)\n    image_patch = ImagePatch(image)\n```\n",
        "code_error_single_image":"{Image Patch}\n\nThe ocr result of the image:\n{Ocr result}\n\nquery:{orignal query}\nAccording to the image shown, write a Python function using the ImagePatch class (above) that can be executed to provide an answer to the query.\n\nHere is a code to attempt to solve the above query:\n{previous code}\nHowever, the code encounters an error: {error message}\n\nYour job is to debug the code,  and modify the code to better address the query, if this is possible.\nYou must consider the following guidelines to revise this code:\n- Your program should be based on the contents of the image. You should first look at it and then program.\n- Use base Python (comparison, sorting) for basic logical operations, left/right/up/down, math, etc.\n- Use the llm_query function to access external information and answer informational questions not concerning the image.\n- When you use the OCR function, you should first see the ocr result and then design the program, to make sure you understand the structure of the ocr result (for example, observe '\n' to identify how many lines there are, and which elements are on the same lines).\n- Remember that the ocr results give all texts in the image in raw markdown format showing the original code, without any processing, shown in only one codeblock. The texts are described in the reading form, from the upper-left to the bottom-right. All variables, formulas and words with subscripts or superscripts should be shown in latex form wrapped in '$'.\n- If you believe you can answer the question directly or find it difficult to get the correct answer using the provided API, you don't have to use the provided API. However, you still need to write your answer in Python code!\n- You must write the code in the form of a function named execute_command. This function must return the final answer to the query. Ensure your code start with ```python and end with ``` . For example:\n```python\ndef execute_command(image)\n    image_patch = ImagePatch(image)\n```\n"
    },
    "MATH-V":{
        "code_no_error_single_image":"{previous code}\n\nThe code shown above is written to address the problem shown in the image.\nYour job is to determine whether you can modify the code to better solve the problem depicted in the image. If you believe you can improve the code, respond with \"true\" in the first line and write your revised code in the lines that follow. If you think the code is nearly perfect or you cannot identify any improvements, respond with \"false\" in the first line and do not add anything else.\nIf you write code, the code you modify must be in the form of a function named get_answer with no arguments, designed to solve the problem shown in the image.\nIf the problem is a multiple-choice question, the function should return a letter representing the answer. \nIf it is not a multiple-choice question, the return value of this function is the answer to the question in the picture. \nEnsure your code start with ```python and end with ``` . Here's an example of how you might write this function:\n```python\ndef get_answer():\n    # Insert your code here\n    return answer  # Return the appropriate value depending on the type of problem\n```\n",
        "code_error_single_image":"{previous code}\n\nThe code shown above is written to address the problem shown in the image.\nHowever, the code encounters error: {error message}\nYour job is to debug the code,  and modify the code to better address the problem depicted in the image, if this is possible.\nThe code you modify must be in the form of a function named get_answer with no arguments, designed to solve the problem shown in the image.\nIf the problem is a multiple-choice question, the function should return a letter representing the answer. \nIf it is not a multiple-choice question, the return value of this function is the answer to the question in the picture. \nEnsure your code start with ```python and end with ``` . Here's an example of how you might write this function:\n```python\ndef get_answer():\n    # Insert your code here\n    return answer  # Return the appropriate value depending on the type of problem\n```\n"
    },
    "Class_ImagePatch":"import math\n\nclass ImagePatch:\n    \"\"\"A Python class containing a crop of an image centered around a particular object, as well as relevant information.\n    Attributes\n    ----------\n    cropped_image : array_like\n        An array-like of the cropped image taken from the original image.\n    left, lower, right, upper : int\n        An int describing the position of the (left/lower/right/upper) border of the crop's bounding box in the original image.\n\n    Methods\n    -------\n    find(object_name: str)->List[ImagePatch]\n        Returns a list of new ImagePatch objects containing crops of the image centered around any objects found in the\n        image matching the object_name.\n    exists(object_name: str)->bool\n        Returns True if the object specified by object_name is found in the image, and False otherwise.\n    verify_property(property: str)->bool\n        Returns True if the property is met, and False otherwise.\n    best_text_match(option_list: List[str], prefix: str)->str\n        Returns the string that best matches the image.\n    simple_query(question: str=None)->str\n        Returns the answer to a basic question asked about the image. If no question is provided, returns the answer to \"What is this?\".\n    llm_query(question: str, long_answer: bool)->str\n        References a large language model (e.g., GPT) to produce a response to the given question. Default is short-form answers, can be made long-form responses with the long_answer flag.\n    compute_depth()->float\n        Returns the median depth of the image crop.\n    crop(left: int, lower: int, right: int, upper: int)->ImagePatch\n        Returns a new ImagePatch object containing a crop of the image at the given coordinates.\n    \"\"\"\n\n    def __init__(self, image, left: int = None, lower: int = None, right: int = None, upper: int = None):\n        \"\"\"Initializes an ImagePatch object by cropping the image at the given coordinates and stores the coordinates as\n        attributes. If no coordinates are provided, the image is left unmodified, and the coordinates are set to the\n        dimensions of the image.\n        Parameters\n        -------\n        image : array_like\n            An array-like of the original image.\n        left, lower, right, upper : int\n            An int describing the position of the (left/lower/right/upper) border of the crop's bounding box in the original image.\n        \"\"\"\n        if left is None and right is None and upper is None and lower is None:\n            self.cropped_image = image\n            self.left = 0\n            self.lower = 0\n            self.right = image.shape[2]  # width\n            self.upper = image.shape[1]  # height\n        else:\n            self.cropped_image = image[:, lower:upper, left:right]\n            self.left = left\n            self.upper = upper\n            self.right = right\n            self.lower = lower\n\n        self.width = self.cropped_image.shape[2]\n        self.height = self.cropped_image.shape[1]\n\n        self.horizontal_center = (self.left + self.right) / 2\n        self.vertical_center = (self.lower + self.upper) / 2\n\n    def find(self, object_name: str) -> List[ImagePatch]:\n        \"\"\"Returns a list of ImagePatch objects matching object_name contained in the crop if any are found.\n        Otherwise, returns an empty list.\n        Parameters\n        ----------\n        object_name : str\n            the name of the object to be found\n\n        Returns\n        -------\n        List[ImagePatch]\n            a list of ImagePatch objects matching object_name contained in the crop\n\n        Examples\n        --------\n        >>> # return the foo\n        >>> def execute_command(image) -> List[ImagePatch]:\n        >>>     image_patch = ImagePatch(image)\n        >>>     foo_patches = image_patch.find(\"foo\")\n        >>>     return foo_patches\n        \"\"\"\n        return find_in_image(self.cropped_image, object_name)\n\n    def exists(self, object_name: str) -> bool:\n        \"\"\"Returns True if the object specified by object_name is found in the image, and False otherwise.\n        Parameters\n        -------\n        object_name : str\n            A string describing the name of the object to be found in the image.\n\n        Examples\n        -------\n        >>> # Are there both foos and garply bars in the photo?\n        >>> def execute_command(image)->str:\n        >>>     image_patch = ImagePatch(image)\n        >>>     is_foo = image_patch.exists(\"foo\")\n        >>>     is_garply_bar = image_patch.exists(\"garply bar\")\n        >>>     return bool_to_yesno(is_foo and is_garply_bar)\n        \"\"\"\n        return len(self.find(object_name)) > 0\n\n    def verify_property(self, object_name: str, visual_property: str) -> bool:\n        \"\"\"Returns True if the object possesses the visual property, and False otherwise.\n        Differs from 'exists' in that it presupposes the existence of the object specified by object_name, instead checking whether the object possesses the property.\n        Parameters\n        -------\n        object_name : str\n            A string describing the name of the object to be found in the image.\n        visual_property : str\n            A string describing the simple visual property (e.g., color, shape, material) to be checked.\n\n        Examples\n        -------\n        >>> # Do the letters have blue color?\n        >>> def execute_command(image) -> str:\n        >>>     image_patch = ImagePatch(image)\n        >>>     letters_patches = image_patch.find(\"letters\")\n        >>>     # Question assumes only one letter patch\n        >>>     return bool_to_yesno(letters_patches[0].verify_property(\"letters\", \"blue\"))\n        \"\"\"\n        return verify_property(self.cropped_image, object_name, property)\n\n    def best_text_match(self, option_list: List[str], prefix: str=None) -> str:\n        \"\"\"Returns the string that best matches the image.\n        Parameters\n        -------\n        option_list : str\n            A list with the names of the different options\n        prefix : str\n            A string with the prefixes to append to the options\n\n        Examples\n        -------\n        >>> # Is the foo gold or white?\n        >>> def execute_command(image)->str:\n        >>>     image_patch = ImagePatch(image)\n        >>>     foo_patches = image_patch.find(\"foo\")\n        >>>     # Question assumes one foo patch\n        >>>     return foo_patches[0].best_text_match([\"gold\", \"white\"])\n        \"\"\"\n        return best_text_match(self.cropped_image, option_list, prefix)\n\n    def simple_query(self, question: str = None) -> str:\n        \"\"\"Returns the answer to a basic question asked about the image. If no question is provided, returns the answer\n        to \"What is this?\". The questions are about basic perception, and are not meant to be used for complex reasoning\n        or external knowledge.\n        Parameters\n        -------\n        question : str\n            A string describing the question to be asked.\n\n        Examples\n        -------\n\n        >>> # Which kind of baz is not fredding?\n        >>> def execute_command(image) -> str:\n        >>>     image_patch = ImagePatch(image)\n        >>>     baz_patches = image_patch.find(\"baz\")\n        >>>     for baz_patch in baz_patches:\n        >>>         if not baz_patch.verify_property(\"baz\", \"fredding\"):\n        >>>             return baz_patch.simple_query(\"What is this baz?\")\n\n        >>> # What color is the foo?\n        >>> def execute_command(image) -> str:\n        >>>     image_patch = ImagePatch(image)\n        >>>     foo_patches = image_patch.find(\"foo\")\n        >>>     foo_patch = foo_patches[0]\n        >>>     return foo_patch.simple_query(\"What is the color?\")\n\n        >>> # Is the second bar from the left quuxy?\n        >>> def execute_command(image) -> str:\n        >>>     image_patch = ImagePatch(image)\n        >>>     bar_patches = image_patch.find(\"bar\")\n        >>>     bar_patches.sort(key=lambda x: x.horizontal_center)\n        >>>     bar_patch = bar_patches[1]\n        >>>     return bar_patch.simple_query(\"Is the bar quuxy?\")\n        \"\"\"\n        return simple_query(self.cropped_image, question)\n\n    def compute_depth(self):\n        \"\"\"Returns the median depth of the image crop\n        Parameters\n        ----------\n        Returns\n        -------\n        float\n            the median depth of the image crop\n\n        Examples\n        --------\n        >>> # the bar furthest away\n        >>> def execute_command(image)->ImagePatch:\n        >>>     image_patch = ImagePatch(image)\n        >>>     bar_patches = image_patch.find(\"bar\")\n        >>>     bar_patches.sort(key=lambda bar: bar.compute_depth())\n        >>>     return bar_patches[-1]\n        \"\"\"\n        depth_map = compute_depth(self.cropped_image)\n        return depth_map.median()\n\n    def crop(self, left: int, lower: int, right: int, upper: int) -> ImagePatch:\n        \"\"\"Returns a new ImagePatch cropped from the current ImagePatch.\n        Parameters\n        -------\n        left, lower, right, upper : int\n            The (left/lower/right/upper)most pixel of the cropped image.\n        -------\n        \"\"\"\n        return ImagePatch(self.cropped_image, left, lower, right, upper)\n\n    def overlaps_with(self, left, lower, right, upper):\n        \"\"\"Returns True if a crop with the given coordinates overlaps with this one,\n        else False.\n        Parameters\n        ----------\n        left, lower, right, upper : int\n            the (left/lower/right/upper) border of the crop to be checked\n\n        Returns\n        -------\n        bool\n            True if a crop with the given coordinates overlaps with this one, else False\n\n        Examples\n        --------\n        >>> # black foo on top of the qux\n        >>> def execute_command(image) -> ImagePatch:\n        >>>     image_patch = ImagePatch(image)\n        >>>     qux_patches = image_patch.find(\"qux\")\n        >>>     qux_patch = qux_patches[0]\n        >>>     foo_patches = image_patch.find(\"black foo\")\n        >>>     for foo in foo_patches:\n        >>>         if foo.vertical_center > qux_patch.vertical_center\n        >>>             return foo\n        \"\"\"\n        return self.left <= right and self.right >= left and self.lower <= upper and self.upper >= lower\n\n    def OCR(self) -> str:\n        '''\n        Returns\n        -------\n        str\n            Output all texts in the image in raw markdown format showing the original code, without any processing, shown in only one code block. The texts are described in the raster scan order, from the upper-left to the bottom-right. All variables, formulas and words with subscripts or superscripts should be shown in latex form wrapped in '$'. If no texts available, then the output will be 'no texts in the image'.\n\n        '''\n        # texts: str; \n        return texts\n    \n\n    def llm_query(self, question: str, long_answer: bool = True) -> str:\n        '''Answers a text question using GPT-3. The input question is always a formatted string with a variable in it.\n\n        Parameters\n        ----------\n        question: str\n            the text question to ask. Must not contain any reference to 'the image' or 'the photo', etc.\n        long_answer: bool\n            whether to return a short answer or a long answer. Short answers are one or at most two words, very concise.\n            Long answers are longer, and may be paragraphs and explanations. Defalt is True (so long answer).\n\n        Examples\n        --------\n        >>> # What is the city this building is in?\n        >>> def execute_command(image) -> str:\n        >>>     image_patch = ImagePatch(image)\n        >>>     building_patches = image_patch.find(\"building\")\n        >>>     building_patch = building_patches[0]\n        >>>     building_name = building_patch.simple_query(\"What is the name of the building?\")\n        >>>     return building_patch.llm_query(f\"What city is {building_name} in?\", long_answer=False)\n\n        >>> # Who invented this object?\n        >>> def execute_command(image) -> str:\n        >>>     image_patch = ImagePatch(image)\n        >>>     object_patches = image_patch.find(\"object\")\n        >>>     object_patch = object_patches[0]\n        >>>     object_name = object_patch.simple_query(\"What is the name of the object?\")\n        >>>     return object_patch.llm_query(f\"Who invented {object_name}?\", long_answer=False)\n\n        >>> # Explain the history behind this object.\n        >>> def execute_command(image) -> str:\n        >>>     image_patch = ImagePatch(image)\n        >>>     object_patches = image_patch.find(\"object\")\n        >>>     object_patch = object_patches[0]\n        >>>     object_name = object_patch.simple_query(\"What is the name of the object?\")\n        >>>     return object_patch.llm_query(f\"What is the history behind {object_name}?\", long_answer=True)\n        '''\n        return llm_query(question, long_answer)\n\n\ndef best_image_match(list_patches: List[ImagePatch], content: List[str], return_index=False) -> Union[ImagePatch, int]:\n    \"\"\"Returns the patch most likely to contain the content.\n    Parameters\n    ----------\n    list_patches : List[ImagePatch]\n    content : List[str]\n        the object of interest\n    return_index : bool\n        if True, returns the index of the patch most likely to contain the object\n\n    Returns\n    -------\n    int\n        Patch most likely to contain the object\n    \"\"\"\n    return best_image_match(list_patches, content, return_index)\n\n\ndef distance(patch_a: ImagePatch, patch_b: ImagePatch) -> float:\n    \"\"\"\n    Returns the distance between the edges of two ImagePatches. If the patches overlap, it returns a negative distance\n    corresponding to the negative intersection over union.\n\n    Parameters\n    ----------\n    patch_a : ImagePatch\n    patch_b : ImagePatch\n\n    Examples\n    --------\n    # Return the qux that is closest to the foo\n    >>> def execute_command(image):\n    >>>     image_patch = ImagePatch(image)\n    >>>     qux_patches = image_patch.find('qux')\n    >>>     foo_patches = image_patch.find('foo')\n    >>>     foo_patch = foo_patches[0]\n    >>>     qux_patches.sort(key=lambda x: distance(x, foo_patch))\n    >>>     return qux_patches[0]\n    \"\"\"\n    return distance(patch_a, patch_b)\n\n\ndef bool_to_yesno(bool_answer: bool) -> str:\t\n    return \"yes\" if bool_answer else \"no\"\n\n\ndef coerce_to_numeric(string):\n    \"\"\"\n    This function takes a string as input and returns a float after removing any non-numeric characters.\n    If the input string contains a range (e.g. \"10-15\"), it returns the first value in the range.\n    \"\"\"\n    return coerce_to_numeric(string)"
}