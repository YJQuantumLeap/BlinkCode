{"id": 0, "path": "Webpage/images/000.png", "type": "Webpage"}
{"id": 1, "path": "Webpage/images/001.png", "type": "Webpage"}
{"id": 2, "path": "Webpage/images/002.png", "type": "Webpage"}
{"id": 3, "path": "Webpage/images/003.png", "type": "Webpage"}
{"id": 4, "path": "Webpage/images/004.png", "type": "Webpage"}
{"id": 5, "path": "Webpage/images/005.png", "type": "Webpage"}
{"id": 6, "path": "Webpage/images/006.png", "type": "Webpage"}
{"id": 7, "path": "Webpage/images/007.png", "type": "Webpage"}
{"id": 8, "path": "Webpage/images/008.png", "type": "Webpage"}
{"id": 9, "path": "Webpage/images/009.png", "type": "Webpage"}
{"id": 10, "path": "Webpage/images/010.png", "type": "Webpage"}
{"id": 11, "path": "Webpage/images/011.png", "type": "Webpage"}
{"id": 12, "path": "Webpage/images/012.png", "type": "Webpage"}
{"id": 13, "path": "Webpage/images/013.png", "type": "Webpage"}
{"id": 14, "path": "Webpage/images/014.png", "type": "Webpage"}
{"id": 15, "path": "Webpage/images/015.png", "type": "Webpage"}
{"id": 16, "path": "Webpage/images/016.png", "type": "Webpage"}
{"id": 17, "path": "Webpage/images/017.png", "type": "Webpage"}
{"id": 18, "path": "Webpage/images/018.png", "type": "Webpage"}
{"id": 19, "path": "Webpage/images/019.png", "type": "Webpage"}
{"id": 20, "path": "Webpage/images/020.png", "type": "Webpage"}
{"id": 21, "path": "Webpage/images/021.png", "type": "Webpage"}
{"id": 22, "path": "Webpage/images/022.png", "type": "Webpage"}
{"id": 23, "path": "Webpage/images/023.png", "type": "Webpage"}
{"id": 24, "path": "Webpage/images/024.png", "type": "Webpage"}
{"id": 25, "path": "Webpage/images/025.png", "type": "Webpage"}
{"id": 26, "path": "Webpage/images/026.png", "type": "Webpage"}
{"id": 27, "path": "Webpage/images/027.png", "type": "Webpage"}
{"id": 28, "path": "Webpage/images/028.png", "type": "Webpage"}
{"id": 29, "path": "Webpage/images/029.png", "type": "Webpage"}
{"id": 30, "path": "Webpage/images/030.png", "type": "Webpage"}
{"id": 31, "path": "Webpage/images/031.png", "type": "Webpage"}
{"id": 32, "path": "Webpage/images/032.png", "type": "Webpage"}
{"id": 33, "path": "Webpage/images/033.png", "type": "Webpage"}
{"id": 34, "path": "Webpage/images/034.png", "type": "Webpage"}
{"id": 35, "path": "Webpage/images/035.png", "type": "Webpage"}
{"id": 36, "path": "Webpage/images/036.png", "type": "Webpage"}
{"id": 37, "path": "Webpage/images/037.png", "type": "Webpage"}
{"id": 38, "path": "Webpage/images/038.png", "type": "Webpage"}
{"id": 39, "path": "Webpage/images/039.png", "type": "Webpage"}
{"id": 40, "path": "Webpage/images/040.png", "type": "Webpage"}
{"id": 41, "path": "Webpage/images/041.png", "type": "Webpage"}
{"id": 42, "path": "Webpage/images/042.png", "type": "Webpage"}
{"id": 43, "path": "Webpage/images/043.png", "type": "Webpage"}
{"id": 44, "path": "Webpage/images/044.png", "type": "Webpage"}
{"id": 45, "path": "Webpage/images/045.png", "type": "Webpage"}
{"id": 46, "path": "Webpage/images/046.png", "type": "Webpage"}
{"id": 47, "path": "Webpage/images/047.png", "type": "Webpage"}
{"id": 48, "path": "Webpage/images/048.png", "type": "Webpage"}
{"id": 49, "path": "Webpage/images/049.png", "type": "Webpage"}
{"id": 50, "path": "Webpage/images/050.png", "type": "Webpage"}
{"id": 51, "path": "Webpage/images/051.png", "type": "Webpage"}
{"id": 52, "path": "Webpage/images/052.png", "type": "Webpage"}
{"id": 53, "path": "Webpage/images/053.png", "type": "Webpage"}
{"id": 54, "path": "Webpage/images/054.png", "type": "Webpage"}
{"id": 55, "path": "Webpage/images/055.png", "type": "Webpage"}
{"id": 56, "path": "Webpage/images/056.png", "type": "Webpage"}
{"id": 57, "path": "Webpage/images/057.png", "type": "Webpage"}
{"id": 58, "path": "Webpage/images/058.png", "type": "Webpage"}
{"id": 59, "path": "Webpage/images/059.png", "type": "Webpage"}
{"id": 60, "path": "Webpage/images/060.png", "type": "Webpage"}
{"id": 61, "path": "Webpage/images/061.png", "type": "Webpage"}
{"id": 62, "path": "Webpage/images/062.png", "type": "Webpage"}
{"id": 63, "path": "Webpage/images/063.png", "type": "Webpage"}
{"id": 64, "path": "Webpage/images/064.png", "type": "Webpage"}
{"id": 65, "path": "Webpage/images/065.png", "type": "Webpage"}
{"id": 66, "path": "Webpage/images/066.png", "type": "Webpage"}
{"id": 67, "path": "Webpage/images/067.png", "type": "Webpage"}
{"id": 68, "path": "Webpage/images/068.png", "type": "Webpage"}
{"id": 69, "path": "Webpage/images/069.png", "type": "Webpage"}
{"id": 70, "path": "Webpage/images/070.png", "type": "Webpage"}
{"id": 71, "path": "Webpage/images/071.png", "type": "Webpage"}
{"id": 72, "path": "Webpage/images/072.png", "type": "Webpage"}
{"id": 73, "path": "Webpage/images/073.png", "type": "Webpage"}
{"id": 74, "path": "Webpage/images/074.png", "type": "Webpage"}
{"id": 75, "path": "Webpage/images/075.png", "type": "Webpage"}
{"id": 76, "path": "Webpage/images/076.png", "type": "Webpage"}
{"id": 77, "path": "Webpage/images/077.png", "type": "Webpage"}
{"id": 78, "path": "Webpage/images/078.png", "type": "Webpage"}
{"id": 79, "path": "Webpage/images/079.png", "type": "Webpage"}
{"id": 80, "path": "Webpage/images/080.png", "type": "Webpage"}
{"id": 81, "path": "Webpage/images/081.png", "type": "Webpage"}
{"id": 82, "path": "Webpage/images/082.png", "type": "Webpage"}
{"id": 83, "path": "Webpage/images/083.png", "type": "Webpage"}
{"id": 84, "path": "Webpage/images/084.png", "type": "Webpage"}
{"id": 85, "path": "Webpage/images/085.png", "type": "Webpage"}
{"id": 86, "path": "Webpage/images/086.png", "type": "Webpage"}
{"id": 87, "path": "Webpage/images/087.png", "type": "Webpage"}
{"id": 88, "path": "Webpage/images/088.png", "type": "Webpage"}
{"id": 89, "path": "Webpage/images/089.png", "type": "Webpage"}
{"id": 90, "path": "Webpage/images/090.png", "type": "Webpage"}
{"id": 91, "path": "Webpage/images/091.png", "type": "Webpage"}
{"id": 92, "path": "Webpage/images/092.png", "type": "Webpage"}
{"id": 93, "path": "Webpage/images/093.png", "type": "Webpage"}
{"id": 94, "path": "Webpage/images/094.png", "type": "Webpage"}
{"id": 95, "path": "Webpage/images/095.png", "type": "Webpage"}
{"id": 96, "path": "Webpage/images/096.png", "type": "Webpage"}
{"id": 97, "path": "Webpage/images/097.png", "type": "Webpage"}
{"id": 98, "path": "Webpage/images/098.png", "type": "Webpage"}
{"id": 99, "path": "Webpage/images/099.png", "type": "Webpage"}
{"id": 100, "path": "Webpage/images/100.png", "type": "Webpage"}
{"id": 101, "path": "Webpage/images/101.png", "type": "Webpage"}
{"id": 102, "path": "Webpage/images/102.png", "type": "Webpage"}
{"id": 103, "path": "Webpage/images/103.png", "type": "Webpage"}
{"id": 104, "path": "Webpage/images/104.png", "type": "Webpage"}
{"id": 105, "path": "Webpage/images/105.png", "type": "Webpage"}
{"id": 106, "path": "Webpage/images/106.png", "type": "Webpage"}
{"id": 107, "path": "Webpage/images/107.png", "type": "Webpage"}
{"id": 108, "path": "Webpage/images/108.png", "type": "Webpage"}
{"id": 109, "path": "Webpage/images/109.png", "type": "Webpage"}
{"id": 110, "path": "Webpage/images/110.png", "type": "Webpage"}
{"id": 111, "path": "Webpage/images/111.png", "type": "Webpage"}
{"id": 112, "path": "Webpage/images/112.png", "type": "Webpage"}
{"id": 113, "path": "Webpage/images/113.png", "type": "Webpage"}
{"id": 114, "path": "Webpage/images/114.png", "type": "Webpage"}
{"id": 115, "path": "Webpage/images/115.png", "type": "Webpage"}
{"id": 116, "path": "Webpage/images/116.png", "type": "Webpage"}
{"id": 117, "path": "Webpage/images/117.png", "type": "Webpage"}
{"id": 118, "path": "Webpage/images/118.png", "type": "Webpage"}
{"id": 119, "path": "Webpage/images/119.png", "type": "Webpage"}
{"id": 120, "path": "Webpage/images/120.png", "type": "Webpage"}
{"id": 121, "path": "Webpage/images/121.png", "type": "Webpage"}
{"id": 0, "path": "Matplotlib/images/000.png", "type": "Matplotlib"}
{"id": 1, "path": "Matplotlib/images/001.png", "type": "Matplotlib"}
{"id": 2, "path": "Matplotlib/images/002.png", "type": "Matplotlib"}
{"id": 3, "path": "Matplotlib/images/003.png", "type": "Matplotlib"}
{"id": 4, "path": "Matplotlib/images/004.png", "type": "Matplotlib"}
{"id": 5, "path": "Matplotlib/images/005.png", "type": "Matplotlib"}
{"id": 6, "path": "Matplotlib/images/006.png", "type": "Matplotlib"}
{"id": 7, "path": "Matplotlib/images/007.png", "type": "Matplotlib"}
{"id": 8, "path": "Matplotlib/images/008.png", "type": "Matplotlib"}
{"id": 9, "path": "Matplotlib/images/009.png", "type": "Matplotlib"}
{"id": 10, "path": "Matplotlib/images/010.png", "type": "Matplotlib"}
{"id": 11, "path": "Matplotlib/images/011.png", "type": "Matplotlib"}
{"id": 12, "path": "Matplotlib/images/012.png", "type": "Matplotlib"}
{"id": 13, "path": "Matplotlib/images/013.png", "type": "Matplotlib"}
{"id": 14, "path": "Matplotlib/images/014.png", "type": "Matplotlib"}
{"id": 15, "path": "Matplotlib/images/015.png", "type": "Matplotlib"}
{"id": 16, "path": "Matplotlib/images/016.png", "type": "Matplotlib"}
{"id": 17, "path": "Matplotlib/images/017.png", "type": "Matplotlib"}
{"id": 18, "path": "Matplotlib/images/018.png", "type": "Matplotlib"}
{"id": 19, "path": "Matplotlib/images/019.png", "type": "Matplotlib"}
{"id": 20, "path": "Matplotlib/images/020.png", "type": "Matplotlib"}
{"id": 21, "path": "Matplotlib/images/021.png", "type": "Matplotlib"}
{"id": 22, "path": "Matplotlib/images/022.png", "type": "Matplotlib"}
{"id": 23, "path": "Matplotlib/images/023.png", "type": "Matplotlib"}
{"id": 24, "path": "Matplotlib/images/024.png", "type": "Matplotlib"}
{"id": 25, "path": "Matplotlib/images/025.png", "type": "Matplotlib"}
{"id": 26, "path": "Matplotlib/images/026.png", "type": "Matplotlib"}
{"id": 27, "path": "Matplotlib/images/027.png", "type": "Matplotlib"}
{"id": 28, "path": "Matplotlib/images/028.png", "type": "Matplotlib"}
{"id": 29, "path": "Matplotlib/images/029.png", "type": "Matplotlib"}
{"id": 30, "path": "Matplotlib/images/030.png", "type": "Matplotlib"}
{"id": 31, "path": "Matplotlib/images/031.png", "type": "Matplotlib"}
{"id": 32, "path": "Matplotlib/images/032.png", "type": "Matplotlib"}
{"id": 33, "path": "Matplotlib/images/033.png", "type": "Matplotlib"}
{"id": 34, "path": "Matplotlib/images/034.png", "type": "Matplotlib"}
{"id": 35, "path": "Matplotlib/images/035.png", "type": "Matplotlib"}
{"id": 36, "path": "Matplotlib/images/036.png", "type": "Matplotlib"}
{"id": 37, "path": "Matplotlib/images/037.png", "type": "Matplotlib"}
{"id": 38, "path": "Matplotlib/images/038.png", "type": "Matplotlib"}
{"id": 39, "path": "Matplotlib/images/039.png", "type": "Matplotlib"}
{"id": 40, "path": "Matplotlib/images/040.png", "type": "Matplotlib"}
{"id": 41, "path": "Matplotlib/images/041.png", "type": "Matplotlib"}
{"id": 42, "path": "Matplotlib/images/042.png", "type": "Matplotlib"}
{"id": 43, "path": "Matplotlib/images/043.png", "type": "Matplotlib"}
{"id": 44, "path": "Matplotlib/images/044.png", "type": "Matplotlib"}
{"id": 45, "path": "Matplotlib/images/045.png", "type": "Matplotlib"}
{"id": 46, "path": "Matplotlib/images/046.png", "type": "Matplotlib"}
{"id": 47, "path": "Matplotlib/images/047.png", "type": "Matplotlib"}
{"id": 48, "path": "Matplotlib/images/048.png", "type": "Matplotlib"}
{"id": 49, "path": "Matplotlib/images/049.png", "type": "Matplotlib"}
{"id": 50, "path": "Matplotlib/images/050.png", "type": "Matplotlib"}
{"id": 51, "path": "Matplotlib/images/051.png", "type": "Matplotlib"}
{"id": 52, "path": "Matplotlib/images/052.png", "type": "Matplotlib"}
{"id": 53, "path": "Matplotlib/images/053.png", "type": "Matplotlib"}
{"id": 54, "path": "Matplotlib/images/054.png", "type": "Matplotlib"}
{"id": 55, "path": "Matplotlib/images/055.png", "type": "Matplotlib"}
{"id": 56, "path": "Matplotlib/images/056.png", "type": "Matplotlib"}
{"id": 57, "path": "Matplotlib/images/057.png", "type": "Matplotlib"}
{"id": 58, "path": "Matplotlib/images/058.png", "type": "Matplotlib"}
{"id": 59, "path": "Matplotlib/images/059.png", "type": "Matplotlib"}
{"id": 60, "path": "Matplotlib/images/060.png", "type": "Matplotlib"}
{"id": 61, "path": "Matplotlib/images/061.png", "type": "Matplotlib"}
{"id": 62, "path": "Matplotlib/images/062.png", "type": "Matplotlib"}
{"id": 63, "path": "Matplotlib/images/063.png", "type": "Matplotlib"}
{"id": 64, "path": "Matplotlib/images/064.png", "type": "Matplotlib"}
{"id": 65, "path": "Matplotlib/images/065.png", "type": "Matplotlib"}
{"id": 66, "path": "Matplotlib/images/066.png", "type": "Matplotlib"}
{"id": 67, "path": "Matplotlib/images/067.png", "type": "Matplotlib"}
{"id": 68, "path": "Matplotlib/images/068.png", "type": "Matplotlib"}
{"id": 69, "path": "Matplotlib/images/069.png", "type": "Matplotlib"}
{"id": 70, "path": "Matplotlib/images/070.png", "type": "Matplotlib"}
{"id": 71, "path": "Matplotlib/images/071.png", "type": "Matplotlib"}
{"id": 72, "path": "Matplotlib/images/072.png", "type": "Matplotlib"}
{"id": 73, "path": "Matplotlib/images/073.png", "type": "Matplotlib"}
{"id": 74, "path": "Matplotlib/images/074.png", "type": "Matplotlib"}
{"id": 75, "path": "Matplotlib/images/075.png", "type": "Matplotlib"}
{"id": 76, "path": "Matplotlib/images/076.png", "type": "Matplotlib"}
{"id": 77, "path": "Matplotlib/images/077.png", "type": "Matplotlib"}
{"id": 78, "path": "Matplotlib/images/078.png", "type": "Matplotlib"}
{"id": 79, "path": "Matplotlib/images/079.png", "type": "Matplotlib"}
{"id": 80, "path": "Matplotlib/images/080.png", "type": "Matplotlib"}
{"id": 81, "path": "Matplotlib/images/081.png", "type": "Matplotlib"}
{"id": 82, "path": "Matplotlib/images/082.png", "type": "Matplotlib"}
{"id": 83, "path": "Matplotlib/images/083.png", "type": "Matplotlib"}
{"id": 84, "path": "Matplotlib/images/084.png", "type": "Matplotlib"}
{"id": 85, "path": "Matplotlib/images/085.png", "type": "Matplotlib"}
{"id": 86, "path": "Matplotlib/images/086.png", "type": "Matplotlib"}
{"id": 87, "path": "Matplotlib/images/087.png", "type": "Matplotlib"}
{"id": 88, "path": "Matplotlib/images/088.png", "type": "Matplotlib"}
{"id": 89, "path": "Matplotlib/images/089.png", "type": "Matplotlib"}
{"id": 90, "path": "Matplotlib/images/090.png", "type": "Matplotlib"}
{"id": 91, "path": "Matplotlib/images/091.png", "type": "Matplotlib"}
{"id": 92, "path": "Matplotlib/images/092.png", "type": "Matplotlib"}
{"id": 93, "path": "Matplotlib/images/093.png", "type": "Matplotlib"}
{"id": 94, "path": "Matplotlib/images/094.png", "type": "Matplotlib"}
{"id": 95, "path": "Matplotlib/images/095.png", "type": "Matplotlib"}
{"id": 96, "path": "Matplotlib/images/096.png", "type": "Matplotlib"}
{"id": 97, "path": "Matplotlib/images/097.png", "type": "Matplotlib"}
{"id": 98, "path": "Matplotlib/images/098.png", "type": "Matplotlib"}
{"id": 99, "path": "Matplotlib/images/099.png", "type": "Matplotlib"}
{"id": 100, "path": "Matplotlib/images/100.png", "type": "Matplotlib"}
{"id": 101, "path": "Matplotlib/images/101.png", "type": "Matplotlib"}
{"id": 102, "path": "Matplotlib/images/102.png", "type": "Matplotlib"}
{"id": 103, "path": "Matplotlib/images/103.png", "type": "Matplotlib"}
{"id": 104, "path": "Matplotlib/images/104.png", "type": "Matplotlib"}
{"id": 105, "path": "Matplotlib/images/105.png", "type": "Matplotlib"}
{"id": 106, "path": "Matplotlib/images/106.png", "type": "Matplotlib"}
{"id": 107, "path": "Matplotlib/images/107.png", "type": "Matplotlib"}
{"id": 108, "path": "Matplotlib/images/108.png", "type": "Matplotlib"}
{"id": 109, "path": "Matplotlib/images/109.png", "type": "Matplotlib"}
{"id": 0, "path": "HumanEval-V/images/000.png", "function_name": "digits", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n", "type": "HumanEval-V"}
{"id": 1, "path": "HumanEval-V/images/001.png", "function_name": "remove_duplicates", "evaluation_function": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n", "type": "HumanEval-V"}
{"id": 2, "path": "HumanEval-V/images/002.png", "function_name": "fib4", "evaluation_function": "def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n", "type": "HumanEval-V"}
{"id": 3, "path": "HumanEval-V/images/003.png", "function_name": "incr_list", "evaluation_function": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n", "type": "HumanEval-V"}
{"id": 4, "path": "HumanEval-V/images/004.png", "function_name": "by_length", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n", "type": "HumanEval-V"}
{"id": 5, "path": "HumanEval-V/images/005.png", "function_name": "anti_shuffle", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "type": "HumanEval-V"}
{"id": 6, "path": "HumanEval-V/images/006.png", "function_name": "numerical_letter_grade", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "type": "HumanEval-V"}
{"id": 7, "path": "HumanEval-V/images/007.png", "function_name": "cycpattern_check", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n", "type": "HumanEval-V"}
{"id": 8, "path": "HumanEval-V/images/008.png", "function_name": "prime_fib", "evaluation_function": "def check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n", "type": "HumanEval-V"}
{"id": 9, "path": "HumanEval-V/images/009.png", "function_name": "fruit_distribution", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n", "type": "HumanEval-V"}
{"id": 10, "path": "HumanEval-V/images/010.png", "function_name": "solve", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n", "type": "HumanEval-V"}
{"id": 11, "path": "HumanEval-V/images/011.png", "function_name": "filter_integers", "evaluation_function": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n", "type": "HumanEval-V"}
{"id": 12, "path": "HumanEval-V/images/012.png", "function_name": "add", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n", "type": "HumanEval-V"}
{"id": 13, "path": "HumanEval-V/images/013.png", "function_name": "solution", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n", "type": "HumanEval-V"}
{"id": 14, "path": "HumanEval-V/images/014.png", "function_name": "x_or_y", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n", "type": "HumanEval-V"}
{"id": 15, "path": "HumanEval-V/images/015.png", "function_name": "correct_bracketing", "evaluation_function": "def check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n", "type": "HumanEval-V"}
{"id": 16, "path": "HumanEval-V/images/016.png", "function_name": "make_a_pile", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 17, "path": "HumanEval-V/images/017.png", "function_name": "decode_shift", "evaluation_function": "def check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n", "type": "HumanEval-V"}
{"id": 18, "path": "HumanEval-V/images/018.png", "function_name": "filter_by_prefix", "evaluation_function": "def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n", "type": "HumanEval-V"}
{"id": 19, "path": "HumanEval-V/images/019.png", "function_name": "is_sorted", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 20, "path": "HumanEval-V/images/020.png", "function_name": "prod_signs", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 21, "path": "HumanEval-V/images/021.png", "function_name": "multiply", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n", "type": "HumanEval-V"}
{"id": 22, "path": "HumanEval-V/images/022.png", "function_name": "histogram", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 23, "path": "HumanEval-V/images/023.png", "function_name": "find_max", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n", "type": "HumanEval-V"}
{"id": 24, "path": "HumanEval-V/images/024.png", "function_name": "parse_music", "evaluation_function": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n", "type": "HumanEval-V"}
{"id": 25, "path": "HumanEval-V/images/025.png", "function_name": "largest_smallest_integers", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n", "type": "HumanEval-V"}
{"id": 26, "path": "HumanEval-V/images/026.png", "function_name": "sort_numbers", "evaluation_function": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n", "type": "HumanEval-V"}
{"id": 27, "path": "HumanEval-V/images/027.png", "function_name": "odd_count", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 28, "path": "HumanEval-V/images/028.png", "function_name": "greatest_common_divisor", "evaluation_function": "def check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n", "type": "HumanEval-V"}
{"id": 29, "path": "HumanEval-V/images/029.png", "function_name": "reverse_delete", "evaluation_function": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n", "type": "HumanEval-V"}
{"id": 30, "path": "HumanEval-V/images/030.png", "function_name": "compare_one", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "type": "HumanEval-V"}
{"id": 31, "path": "HumanEval-V/images/031.png", "function_name": "max_fill", "evaluation_function": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n", "type": "HumanEval-V"}
{"id": 32, "path": "HumanEval-V/images/032.png", "function_name": "sum_squares", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 33, "path": "HumanEval-V/images/033.png", "function_name": "iscube", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n", "type": "HumanEval-V"}
{"id": 34, "path": "HumanEval-V/images/034.png", "function_name": "select_words", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n", "type": "HumanEval-V"}
{"id": 35, "path": "HumanEval-V/images/035.png", "function_name": "generate_integers", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 36, "path": "HumanEval-V/images/036.png", "function_name": "is_equal_to_sum_even", "evaluation_function": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n", "type": "HumanEval-V"}
{"id": 37, "path": "HumanEval-V/images/037.png", "function_name": "vowels_count", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 38, "path": "HumanEval-V/images/038.png", "function_name": "add_elements", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 39, "path": "HumanEval-V/images/039.png", "function_name": "fibfib", "evaluation_function": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n", "type": "HumanEval-V"}
{"id": 40, "path": "HumanEval-V/images/040.png", "function_name": "common", "evaluation_function": "def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n", "type": "HumanEval-V"}
{"id": 41, "path": "HumanEval-V/images/041.png", "function_name": "get_max_triples", "evaluation_function": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n", "type": "HumanEval-V"}
{"id": 42, "path": "HumanEval-V/images/042.png", "function_name": "count_distinct_characters", "evaluation_function": "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n", "type": "HumanEval-V"}
{"id": 43, "path": "HumanEval-V/images/043.png", "function_name": "median", "evaluation_function": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n", "type": "HumanEval-V"}
{"id": 44, "path": "HumanEval-V/images/044.png", "function_name": "sort_array", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n", "type": "HumanEval-V"}
{"id": 45, "path": "HumanEval-V/images/045.png", "function_name": "digitSum", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n", "type": "HumanEval-V"}
{"id": 46, "path": "HumanEval-V/images/046.png", "function_name": "next_smallest", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "type": "HumanEval-V"}
{"id": 47, "path": "HumanEval-V/images/047.png", "function_name": "valid_date", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n", "type": "HumanEval-V"}
{"id": 48, "path": "HumanEval-V/images/048.png", "function_name": "intersperse", "evaluation_function": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n", "type": "HumanEval-V"}
{"id": 49, "path": "HumanEval-V/images/049.png", "function_name": "Strongest_Extension", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n", "type": "HumanEval-V"}
{"id": 50, "path": "HumanEval-V/images/050.png", "function_name": "prime_length", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n", "type": "HumanEval-V"}
{"id": 51, "path": "HumanEval-V/images/051.png", "function_name": "has_close_elements", "evaluation_function": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n", "type": "HumanEval-V"}
{"id": 52, "path": "HumanEval-V/images/052.png", "function_name": "sort_third", "evaluation_function": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n", "type": "HumanEval-V"}
{"id": 53, "path": "HumanEval-V/images/053.png", "function_name": "count_up_to", "evaluation_function": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n", "type": "HumanEval-V"}
{"id": 54, "path": "HumanEval-V/images/054.png", "function_name": "fix_spaces", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 55, "path": "HumanEval-V/images/055.png", "function_name": "get_odd_collatz", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 56, "path": "HumanEval-V/images/056.png", "function_name": "sum_squares", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n", "type": "HumanEval-V"}
{"id": 57, "path": "HumanEval-V/images/057.png", "function_name": "count_upper", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "type": "HumanEval-V"}
{"id": 58, "path": "HumanEval-V/images/058.png", "function_name": "order_by_points", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 59, "path": "HumanEval-V/images/059.png", "function_name": "rescale_to_unit", "evaluation_function": "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n", "type": "HumanEval-V"}
{"id": 60, "path": "HumanEval-V/images/060.png", "function_name": "split_words", "evaluation_function": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n", "type": "HumanEval-V"}
{"id": 61, "path": "HumanEval-V/images/061.png", "function_name": "correct_bracketing", "evaluation_function": "def check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n", "type": "HumanEval-V"}
{"id": 62, "path": "HumanEval-V/images/062.png", "function_name": "below_zero", "evaluation_function": "def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n", "type": "HumanEval-V"}
{"id": 63, "path": "HumanEval-V/images/063.png", "function_name": "count_nums", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 64, "path": "HumanEval-V/images/064.png", "function_name": "is_prime", "evaluation_function": "def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n", "type": "HumanEval-V"}
{"id": 65, "path": "HumanEval-V/images/065.png", "function_name": "concatenate", "evaluation_function": "def check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n", "type": "HumanEval-V"}
{"id": 66, "path": "HumanEval-V/images/066.png", "function_name": "words_string", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n", "type": "HumanEval-V"}
{"id": 67, "path": "HumanEval-V/images/067.png", "function_name": "rolling_max", "evaluation_function": "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n", "type": "HumanEval-V"}
{"id": 68, "path": "HumanEval-V/images/068.png", "function_name": "exchange", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n", "type": "HumanEval-V"}
{"id": 69, "path": "HumanEval-V/images/069.png", "function_name": "encode", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 70, "path": "HumanEval-V/images/070.png", "function_name": "fib", "evaluation_function": "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n", "type": "HumanEval-V"}
{"id": 71, "path": "HumanEval-V/images/071.png", "function_name": "string_to_md5", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "type": "HumanEval-V"}
{"id": 72, "path": "HumanEval-V/images/072.png", "function_name": "int_to_mini_roman", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "type": "HumanEval-V"}
{"id": 73, "path": "HumanEval-V/images/073.png", "function_name": "find_zero", "evaluation_function": "def check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n", "type": "HumanEval-V"}
{"id": 74, "path": "HumanEval-V/images/074.png", "function_name": "remove_vowels", "evaluation_function": "def check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n", "type": "HumanEval-V"}
{"id": 75, "path": "HumanEval-V/images/075.png", "function_name": "solve", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n", "type": "HumanEval-V"}
{"id": 76, "path": "HumanEval-V/images/076.png", "function_name": "triangle_area", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n", "type": "HumanEval-V"}
{"id": 77, "path": "HumanEval-V/images/077.png", "function_name": "sort_even", "evaluation_function": "def check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n", "type": "HumanEval-V"}
{"id": 78, "path": "HumanEval-V/images/078.png", "function_name": "unique", "evaluation_function": "def check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n", "type": "HumanEval-V"}
{"id": 79, "path": "HumanEval-V/images/079.png", "function_name": "triangle_area", "evaluation_function": "def check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n", "type": "HumanEval-V"}
{"id": 80, "path": "HumanEval-V/images/080.png", "function_name": "get_positive", "evaluation_function": "def check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n", "type": "HumanEval-V"}
{"id": 81, "path": "HumanEval-V/images/081.png", "function_name": "intersection", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n", "type": "HumanEval-V"}
{"id": 82, "path": "HumanEval-V/images/082.png", "function_name": "simplify", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n", "type": "HumanEval-V"}
{"id": 83, "path": "HumanEval-V/images/083.png", "function_name": "do_algebra", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 84, "path": "HumanEval-V/images/084.png", "function_name": "string_sequence", "evaluation_function": "def check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n", "type": "HumanEval-V"}
{"id": 85, "path": "HumanEval-V/images/085.png", "function_name": "is_nested", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n", "type": "HumanEval-V"}
{"id": 86, "path": "HumanEval-V/images/086.png", "function_name": "longest", "evaluation_function": "def check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n", "type": "HumanEval-V"}
{"id": 87, "path": "HumanEval-V/images/087.png", "function_name": "derivative", "evaluation_function": "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n", "type": "HumanEval-V"}
{"id": 88, "path": "HumanEval-V/images/088.png", "function_name": "sum_to_n", "evaluation_function": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n", "type": "HumanEval-V"}
{"id": 89, "path": "HumanEval-V/images/089.png", "function_name": "encrypt", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 90, "path": "HumanEval-V/images/090.png", "function_name": "check_dict_case", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n", "type": "HumanEval-V"}
{"id": 91, "path": "HumanEval-V/images/091.png", "function_name": "bf", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n", "type": "HumanEval-V"}
{"id": 92, "path": "HumanEval-V/images/092.png", "function_name": "get_row", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "type": "HumanEval-V"}
{"id": 93, "path": "HumanEval-V/images/093.png", "function_name": "f", "evaluation_function": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n", "type": "HumanEval-V"}
{"id": 94, "path": "HumanEval-V/images/094.png", "function_name": "compare", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 95, "path": "HumanEval-V/images/095.png", "function_name": "will_it_fly", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n", "type": "HumanEval-V"}
{"id": 96, "path": "HumanEval-V/images/096.png", "function_name": "double_the_difference", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 97, "path": "HumanEval-V/images/097.png", "function_name": "decode_cyclic", "evaluation_function": "def check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n", "type": "HumanEval-V"}
{"id": 98, "path": "HumanEval-V/images/098.png", "function_name": "fizz_buzz", "evaluation_function": "def check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n", "type": "HumanEval-V"}
{"id": 99, "path": "HumanEval-V/images/099.png", "function_name": "any_int", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 100, "path": "HumanEval-V/images/100.png", "function_name": "can_arrange", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n", "type": "HumanEval-V"}
{"id": 101, "path": "HumanEval-V/images/101.png", "function_name": "specialFilter", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n", "type": "HumanEval-V"}
{"id": 102, "path": "HumanEval-V/images/102.png", "function_name": "same_chars", "evaluation_function": "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n", "type": "HumanEval-V"}
{"id": 103, "path": "HumanEval-V/images/103.png", "function_name": "is_bored", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "type": "HumanEval-V"}
{"id": 104, "path": "HumanEval-V/images/104.png", "function_name": "words_in_sentence", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n", "type": "HumanEval-V"}
{"id": 105, "path": "HumanEval-V/images/105.png", "function_name": "match_parens", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n", "type": "HumanEval-V"}
{"id": 106, "path": "HumanEval-V/images/106.png", "function_name": "rounded_avg", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n", "type": "HumanEval-V"}
{"id": 107, "path": "HumanEval-V/images/107.png", "function_name": "truncate_number", "evaluation_function": "def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n", "type": "HumanEval-V"}
{"id": 108, "path": "HumanEval-V/images/108.png", "function_name": "below_threshold", "evaluation_function": "def check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n", "type": "HumanEval-V"}
{"id": 109, "path": "HumanEval-V/images/109.png", "function_name": "change_base", "evaluation_function": "def check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n", "type": "HumanEval-V"}
{"id": 110, "path": "HumanEval-V/images/110.png", "function_name": "eat", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n", "type": "HumanEval-V"}
{"id": 111, "path": "HumanEval-V/images/111.png", "function_name": "pairs_sum_to_zero", "evaluation_function": "def check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n", "type": "HumanEval-V"}
{"id": 112, "path": "HumanEval-V/images/112.png", "function_name": "skjkasdkd", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n", "type": "HumanEval-V"}
{"id": 113, "path": "HumanEval-V/images/113.png", "function_name": "special_factorial", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n", "type": "HumanEval-V"}
{"id": 114, "path": "HumanEval-V/images/114.png", "function_name": "move_one_ball", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n", "type": "HumanEval-V"}
{"id": 115, "path": "HumanEval-V/images/115.png", "function_name": "minPath", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n", "type": "HumanEval-V"}
{"id": 116, "path": "HumanEval-V/images/116.png", "function_name": "find_closest_elements", "evaluation_function": "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n", "type": "HumanEval-V"}
{"id": 117, "path": "HumanEval-V/images/117.png", "function_name": "modp", "evaluation_function": "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n", "type": "HumanEval-V"}
{"id": 118, "path": "HumanEval-V/images/118.png", "function_name": "max_element", "evaluation_function": "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n", "type": "HumanEval-V"}
{"id": 119, "path": "HumanEval-V/images/119.png", "function_name": "hex_key", "evaluation_function": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n", "type": "HumanEval-V"}
{"id": 0, "path": "MBPP-V/images/000.png", "function_name": "add_pairwise(test_tup)", "evaluation_function": "def check(add_pairwise):\n    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n    assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n    ", "type": "MBPP-V"}
{"id": 1, "path": "MBPP-V/images/001.png", "function_name": "remove_length(test_str, K)", "evaluation_function": "def check(remove_length):\n    assert remove_length('The person is most value tet', 3) == 'person is most value'\n    assert remove_length('If you told me about this ok', 4) == 'If you me about ok'\n    assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'\n    ", "type": "MBPP-V"}
{"id": 2, "path": "MBPP-V/images/002.png", "function_name": "difference(n)", "evaluation_function": "def check(difference):\n    assert difference(3) == 30\n    assert difference(5) == 210\n    assert difference(2) == 6\n    ", "type": "MBPP-V"}
{"id": 3, "path": "MBPP-V/images/003.png", "function_name": "combinations_list(list1)", "evaluation_function": "def check(combinations_list):\n    assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n    ", "type": "MBPP-V"}
{"id": 4, "path": "MBPP-V/images/004.png", "function_name": "find_fixed_point(arr, n)", "evaluation_function": "def check(find_fixed_point):\n    assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\n    assert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\n    assert find_fixed_point([0, 2, 5, 8, 17],5) == 0\n    ", "type": "MBPP-V"}
{"id": 5, "path": "MBPP-V/images/005.png", "function_name": "max_sum_subseq(A)", "evaluation_function": "def check(max_sum_subseq):\n    assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\n    assert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\n    assert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44\n    ", "type": "MBPP-V"}
{"id": 6, "path": "MBPP-V/images/006.png", "function_name": "text_match_three(text)", "evaluation_function": "def check(text_match_three):\n    assert text_match_three(\"ac\")==('Not matched!')\n    assert text_match_three(\"dc\")==('Not matched!')\n    assert text_match_three(\"abbbba\")==('Found a match!')\n    ", "type": "MBPP-V"}
{"id": 7, "path": "MBPP-V/images/007.png", "function_name": "volume_tetrahedron(num)", "evaluation_function": "def check(volume_tetrahedron):\n    assert volume_tetrahedron(10)==117.85\n    assert volume_tetrahedron(15)==397.75\n    assert volume_tetrahedron(20)==942.81\n    ", "type": "MBPP-V"}
{"id": 8, "path": "MBPP-V/images/008.png", "function_name": "count_alpha_dig_spl(string)", "evaluation_function": "def check(count_alpha_dig_spl):\n    assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\n    assert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\n    assert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)\n    ", "type": "MBPP-V"}
{"id": 9, "path": "MBPP-V/images/009.png", "function_name": "find_first_duplicate(nums)", "evaluation_function": "def check(find_first_duplicate):\n    assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n    assert find_first_duplicate([1, 2, 3, 4])==-1\n    assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1\n    ", "type": "MBPP-V"}
{"id": 10, "path": "MBPP-V/images/010.png", "function_name": "remove_Char(s,c)", "evaluation_function": "def check(remove_Char):\n    assert remove_Char(\"aba\",'a') == \"b\"\n    assert remove_Char(\"toggle\",'g') == \"tole\"\n    assert remove_Char(\"aabbc\",'b') == \"aac\"\n    ", "type": "MBPP-V"}
{"id": 11, "path": "MBPP-V/images/011.png", "function_name": "longest_common_subsequence(X, Y, m, n)", "evaluation_function": "def check(longest_common_subsequence):\n    assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n    assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\n    assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2\n    ", "type": "MBPP-V"}
{"id": 12, "path": "MBPP-V/images/012.png", "function_name": "join_tuples(test_list)", "evaluation_function": "def check(join_tuples):\n    assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\n    assert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\n    assert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]\n    ", "type": "MBPP-V"}
{"id": 13, "path": "MBPP-V/images/013.png", "function_name": "big_sum(nums)", "evaluation_function": "def check(big_sum):\n    assert big_sum([1,2,3]) == 4\n    assert big_sum([-1,2,3,4]) == 3\n    assert big_sum([2,3,6]) == 8\n    ", "type": "MBPP-V"}
{"id": 14, "path": "MBPP-V/images/014.png", "function_name": "frequency(a,x)", "evaluation_function": "def check(frequency):\n    assert frequency([1,2,3],4) == 0\n    assert frequency([1,2,2,3,3,3,4],3) == 3\n    assert frequency([0,1,2,3,1,2],1) == 2\n    ", "type": "MBPP-V"}
{"id": 15, "path": "MBPP-V/images/015.png", "function_name": "get_equal(Input, k)", "evaluation_function": "def check(get_equal):\n    assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n    assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\n    assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'\n    ", "type": "MBPP-V"}
{"id": 16, "path": "MBPP-V/images/016.png", "function_name": "get_Pairs_Count(arr,n,sum)", "evaluation_function": "def check(get_Pairs_Count):\n    assert get_Pairs_Count([1,1,1,1],4,2) == 6\n    assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\n    assert get_Pairs_Count([1,-2,3],3,1) == 1\n    ", "type": "MBPP-V"}
{"id": 17, "path": "MBPP-V/images/017.png", "function_name": "increasing_trend(nums)", "evaluation_function": "def check(increasing_trend):\n    assert increasing_trend([1,2,3,4]) == True\n    assert increasing_trend([4,3,2,1]) == False\n    assert increasing_trend([0,1,4,9]) == True\n    ", "type": "MBPP-V"}
{"id": 18, "path": "MBPP-V/images/018.png", "function_name": "raw_heap(rawheap)", "evaluation_function": "def check(raw_heap):\n    assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\n    assert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\n    assert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]\n    ", "type": "MBPP-V"}
{"id": 19, "path": "MBPP-V/images/019.png", "function_name": "min_Jumps(a, b, d)", "evaluation_function": "def check(min_Jumps):\n    assert min_Jumps(3,4,11)==3.5\n    assert min_Jumps(3,4,0)==0\n    assert min_Jumps(11,14,11)==1\n    ", "type": "MBPP-V"}
{"id": 20, "path": "MBPP-V/images/020.png", "function_name": "find_Element(arr,ranges,rotations,index)", "evaluation_function": "def check(find_Element):\n    assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n    assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\n    assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1\n    ", "type": "MBPP-V"}
{"id": 21, "path": "MBPP-V/images/021.png", "function_name": "max_volume(s)", "evaluation_function": "def check(max_volume):\n    assert max_volume(8) == 18\n    assert max_volume(4) == 2\n    assert max_volume(1) == 0\n    ", "type": "MBPP-V"}
{"id": 22, "path": "MBPP-V/images/022.png", "function_name": "set_Right_most_Unset_Bit(n)", "evaluation_function": "def check(set_Right_most_Unset_Bit):\n    assert set_Right_most_Unset_Bit(21) == 23\n    assert set_Right_most_Unset_Bit(11) == 15\n    assert set_Right_most_Unset_Bit(15) == 15\n    ", "type": "MBPP-V"}
{"id": 23, "path": "MBPP-V/images/023.png", "function_name": "recur_gcd(a, b)", "evaluation_function": "def check(recur_gcd):\n    assert recur_gcd(12,14) == 2\n    assert recur_gcd(13,17) == 1\n    assert recur_gcd(9, 3) == 3\n    ", "type": "MBPP-V"}
{"id": 24, "path": "MBPP-V/images/024.png", "function_name": "decimal_to_Octal(deciNum)", "evaluation_function": "def check(decimal_to_Octal):\n    assert decimal_to_Octal(10) == 12\n    assert decimal_to_Octal(2) == 2\n    assert decimal_to_Octal(33) == 41\n    ", "type": "MBPP-V"}
{"id": 25, "path": "MBPP-V/images/025.png", "function_name": "snake_to_camel(word)", "evaluation_function": "def check(snake_to_camel):\n    assert snake_to_camel('python_program')=='PythonProgram'\n    assert snake_to_camel('python_language')==('PythonLanguage')\n    assert snake_to_camel('programming_language')==('ProgrammingLanguage')\n    ", "type": "MBPP-V"}
{"id": 26, "path": "MBPP-V/images/026.png", "function_name": "frequency_Of_Smallest(n,arr)", "evaluation_function": "def check(frequency_Of_Smallest):\n    assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n    assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\n    assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3\n    ", "type": "MBPP-V"}
{"id": 27, "path": "MBPP-V/images/027.png", "function_name": "check_isosceles(x,y,z)", "evaluation_function": "def check(check_isosceles):\n    assert check_isosceles(6,8,12)==True\n    assert check_isosceles(6,6,12)==False\n    assert check_isosceles(6,15,20)==True\n    ", "type": "MBPP-V"}
{"id": 28, "path": "MBPP-V/images/028.png", "function_name": "find_missing(ar,N)", "evaluation_function": "def check(find_missing):\n    assert find_missing([1,2,3,5],4) == 4\n    assert find_missing([1,3,4,5],4) == 2\n    assert find_missing([1,2,3,5,6,7],5) == 4\n    ", "type": "MBPP-V"}
{"id": 29, "path": "MBPP-V/images/029.png", "function_name": "series_sum(number)", "evaluation_function": "def check(series_sum):\n    assert series_sum(6)==91\n    assert series_sum(7)==140\n    assert series_sum(12)==650\n    ", "type": "MBPP-V"}
{"id": 30, "path": "MBPP-V/images/030.png", "function_name": "recursive_list_sum(data_list)", "evaluation_function": "def check(recursive_list_sum):\n    assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n    assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\n    assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210\n    ", "type": "MBPP-V"}
{"id": 31, "path": "MBPP-V/images/031.png", "function_name": "tetrahedral_number(n)", "evaluation_function": "def check(tetrahedral_number):\n    assert tetrahedral_number(5) == 35.0\n    assert tetrahedral_number(6) == 56.0\n    assert tetrahedral_number(7) == 84.0\n    ", "type": "MBPP-V"}
{"id": 32, "path": "MBPP-V/images/032.png", "function_name": "second_frequent(input)", "evaluation_function": "def check(second_frequent):\n    assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\n    assert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\n    assert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'\n    ", "type": "MBPP-V"}
{"id": 33, "path": "MBPP-V/images/033.png", "function_name": "count_common(words)", "evaluation_function": "def check(count_common):\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\n    assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]\n    ", "type": "MBPP-V"}
{"id": 34, "path": "MBPP-V/images/034.png", "function_name": "sum_Of_product(n)", "evaluation_function": "def check(sum_Of_product):\n    assert sum_Of_product(3) == 15\n    assert sum_Of_product(4) == 56\n    assert sum_Of_product(1) == 1\n    ", "type": "MBPP-V"}
{"id": 35, "path": "MBPP-V/images/035.png", "function_name": "get_maxgold(gold, m, n)", "evaluation_function": "def check(get_maxgold):\n    assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n    assert get_maxgold([[10,20],[30,40]],2,2)==70\n    assert get_maxgold([[4,9],[3,7]],2,2)==13\n    ", "type": "MBPP-V"}
{"id": 36, "path": "MBPP-V/images/036.png", "function_name": "count_Digit(n)", "evaluation_function": "def check(count_Digit):\n    assert count_Digit(12345) == 5\n    assert count_Digit(11223305) == 8\n    assert count_Digit(4123459) == 7\n    ", "type": "MBPP-V"}
{"id": 37, "path": "MBPP-V/images/037.png", "function_name": "max_of_three(num1,num2,num3)", "evaluation_function": "def check(max_of_three):\n    assert max_of_three(10,20,30)==30\n    assert max_of_three(55,47,39)==55\n    assert max_of_three(10,49,30)==49\n    ", "type": "MBPP-V"}
{"id": 38, "path": "MBPP-V/images/038.png", "function_name": "all_Bits_Set_In_The_Given_Range(n,l,r)", "evaluation_function": "def check(all_Bits_Set_In_The_Given_Range):\n    assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n    assert all_Bits_Set_In_The_Given_Range(17,2,4) == True\n    assert all_Bits_Set_In_The_Given_Range(39,4,6) == False\n    ", "type": "MBPP-V"}
{"id": 39, "path": "MBPP-V/images/039.png", "function_name": "count_no(A,N,L,R)", "evaluation_function": "def check(count_no):\n    assert count_no(2,3,1,10) == 5\n    assert count_no(3,6,4,20) == 11\n    assert count_no(5,10,4,20) == 16\n    ", "type": "MBPP-V"}
{"id": 40, "path": "MBPP-V/images/040.png", "function_name": "topbottom_surfacearea(r)", "evaluation_function": "def check(topbottom_surfacearea):\n    assert topbottom_surfacearea(10)==314.15000000000003\n    assert topbottom_surfacearea(5)==78.53750000000001\n    assert topbottom_surfacearea(4)==50.264\n    ", "type": "MBPP-V"}
{"id": 41, "path": "MBPP-V/images/041.png", "function_name": "overlapping(list1,list2)", "evaluation_function": "def check(overlapping):\n    assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n    assert overlapping([1,2,3],[4,5,6]) == False\n    assert overlapping([1,4,5],[1,4,5]) == True\n    ", "type": "MBPP-V"}
{"id": 42, "path": "MBPP-V/images/042.png", "function_name": "first_even(nums)", "evaluation_function": "def check(first_even):\n    assert first_even([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n    assert first_even([2, 3, 4]) == 2\n    assert first_even([5, 6, 7]) == 6\n    ", "type": "MBPP-V"}
{"id": 43, "path": "MBPP-V/images/043.png", "function_name": "text_match_word(text)", "evaluation_function": "def check(text_match_word):\n    assert text_match_word(\"python.\")==('Found a match!')\n    assert text_match_word(\"python.\")==('Found a match!')\n    assert text_match_word(\"  lang  .\")==('Not matched!')\n    ", "type": "MBPP-V"}
{"id": 44, "path": "MBPP-V/images/044.png", "function_name": "replace_specialchar(text)", "evaluation_function": "def check(replace_specialchar):\n    assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n    assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\n    assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')\n    ", "type": "MBPP-V"}
{"id": 45, "path": "MBPP-V/images/045.png", "function_name": "find_Min_Sum(a,b,n)", "evaluation_function": "def check(find_Min_Sum):\n    assert find_Min_Sum([3,2,1],[2,1,3],3) == 0\n    assert find_Min_Sum([1,2,3],[4,5,6],3) == 9\n    assert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6\n    ", "type": "MBPP-V"}
{"id": 46, "path": "MBPP-V/images/046.png", "function_name": "float_to_tuple(test_str)", "evaluation_function": "def check(float_to_tuple):\n    assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\n    assert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\n    assert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)\n    ", "type": "MBPP-V"}
{"id": 47, "path": "MBPP-V/images/047.png", "function_name": "heap_queue_largest(nums,n)", "evaluation_function": "def check(heap_queue_largest):\n    assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n    assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \n    assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]\n    ", "type": "MBPP-V"}
{"id": 48, "path": "MBPP-V/images/048.png", "function_name": "assign_freq(test_list)", "evaluation_function": "def check(assign_freq):\n    assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n    assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\n    assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'\n    ", "type": "MBPP-V"}
{"id": 49, "path": "MBPP-V/images/049.png", "function_name": "max_height(node)", "evaluation_function": "def check(max_height):\n    assert (max_height(root)) == 3\n    assert (max_height(root1)) == 5 \n    assert (max_height(root2)) == 4\n    ", "type": "MBPP-V"}
{"id": 50, "path": "MBPP-V/images/050.png", "function_name": "end_num(string)", "evaluation_function": "def check(end_num):\n    assert end_num('abcdef')==False\n    assert end_num('abcdef7')==True\n    assert end_num('abc')==False\n    ", "type": "MBPP-V"}
{"id": 51, "path": "MBPP-V/images/051.png", "function_name": "fourth_Power_Sum(n)", "evaluation_function": "def check(fourth_Power_Sum):\n    assert fourth_Power_Sum(2) == 17\n    assert fourth_Power_Sum(4) == 354\n    assert fourth_Power_Sum(6) == 2275\n    ", "type": "MBPP-V"}
{"id": 52, "path": "MBPP-V/images/052.png", "function_name": "k_smallest_pairs(nums1, nums2, k)", "evaluation_function": "def check(k_smallest_pairs):\n    assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n    assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\n    assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n    ", "type": "MBPP-V"}
{"id": 53, "path": "MBPP-V/images/053.png", "function_name": "zip_tuples(test_tup1, test_tup2)", "evaluation_function": "def check(zip_tuples):\n    assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n    assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\n    assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]\n    ", "type": "MBPP-V"}
{"id": 54, "path": "MBPP-V/images/054.png", "function_name": "extract_date(url)", "evaluation_function": "def check(extract_date):\n    assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\n    assert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\n    assert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]\n    ", "type": "MBPP-V"}
{"id": 55, "path": "MBPP-V/images/055.png", "function_name": "change_date_format(dt)", "evaluation_function": "def check(change_date_format):\n    assert change_date_format('2026-01-02')=='02-01-2026'\n    assert change_date_format('2021-01-04')=='04-01-2021'\n    assert change_date_format('2030-06-06')=='06-06-2030'\n    ", "type": "MBPP-V"}
{"id": 56, "path": "MBPP-V/images/056.png", "function_name": "tuple_to_set(t)", "evaluation_function": "def check(tuple_to_set):\n    assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\n    assert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}\n    assert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}\n    ", "type": "MBPP-V"}
{"id": 57, "path": "MBPP-V/images/057.png", "function_name": "count_reverse_pairs(test_list)", "evaluation_function": "def check(count_reverse_pairs):\n    assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\n    assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\n    assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' \n    ", "type": "MBPP-V"}
{"id": 58, "path": "MBPP-V/images/058.png", "function_name": "match_num(string)", "evaluation_function": "def check(match_num):\n    assert match_num('5-2345861')==True\n    assert match_num('6-2345861')==False\n    assert match_num('78910')==False\n    ", "type": "MBPP-V"}
{"id": 59, "path": "MBPP-V/images/059.png", "function_name": "count_Rectangles(radius)", "evaluation_function": "def check(count_Rectangles):\n    assert count_Rectangles(2) == 8\n    assert count_Rectangles(1) == 1\n    assert count_Rectangles(0) == 0\n    ", "type": "MBPP-V"}
{"id": 60, "path": "MBPP-V/images/060.png", "function_name": "max_of_two( x, y )", "evaluation_function": "def check(max_of_two):\n    assert max_of_two(10,20)==20\n    assert max_of_two(19,15)==19\n    assert max_of_two(-10,-20)==-10\n    ", "type": "MBPP-V"}
{"id": 61, "path": "MBPP-V/images/061.png", "function_name": "even_bit_toggle_number(n)", "evaluation_function": "def check(even_bit_toggle_number):\n    assert even_bit_toggle_number(10) == 0\n    assert even_bit_toggle_number(20) == 30\n    assert even_bit_toggle_number(30) == 20\n    ", "type": "MBPP-V"}
{"id": 62, "path": "MBPP-V/images/062.png", "function_name": "remove_datatype(test_tuple, data_type)", "evaluation_function": "def check(remove_datatype):\n    assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\n    assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\n    assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]\n    ", "type": "MBPP-V"}
{"id": 63, "path": "MBPP-V/images/063.png", "function_name": "heap_assending(nums)", "evaluation_function": "def check(heap_assending):\n    assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n    assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    ", "type": "MBPP-V"}
{"id": 64, "path": "MBPP-V/images/064.png", "function_name": "first_repeated_char(str1)", "evaluation_function": "def check(first_repeated_char):\n    assert first_repeated_char(\"abcabc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"None\"\n    assert first_repeated_char(\"123123\") == \"1\"\n    ", "type": "MBPP-V"}
{"id": 65, "path": "MBPP-V/images/065.png", "function_name": "last_occurence_char(string,char)", "evaluation_function": "def check(last_occurence_char):\n    assert last_occurence_char(\"hello world\",'l')==10\n    assert last_occurence_char(\"language\",'g')==7\n    assert last_occurence_char(\"little\",'y')==None\n    ", "type": "MBPP-V"}
{"id": 66, "path": "MBPP-V/images/066.png", "function_name": "merge_sorted_list(num1,num2,num3)", "evaluation_function": "def check(merge_sorted_list):\n    assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n    ", "type": "MBPP-V"}
{"id": 67, "path": "MBPP-V/images/067.png", "function_name": "string_to_list(string)", "evaluation_function": "def check(string_to_list):\n    assert string_to_list(\"python programming\")==['python','programming']\n    assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\n    assert string_to_list(\"write a program\")==['write','a','program']\n    ", "type": "MBPP-V"}
{"id": 68, "path": "MBPP-V/images/068.png", "function_name": "sum_average(number)", "evaluation_function": "def check(sum_average):\n    assert sum_average(10)==(55, 5.5)\n    assert sum_average(15)==(120, 8.0)\n    assert sum_average(20)==(210, 10.5)\n    ", "type": "MBPP-V"}
{"id": 69, "path": "MBPP-V/images/069.png", "function_name": "first(arr,x,n)", "evaluation_function": "def check(first):\n    assert first([1,2,3,4,5,6,6],6,6) == 5\n    assert first([1,2,2,2,3,2,2,4,2],2,9) == 1\n    assert first([1,2,3],1,3) == 0\n    ", "type": "MBPP-V"}
{"id": 70, "path": "MBPP-V/images/070.png", "function_name": "no_of_subsequences(arr, k)", "evaluation_function": "def check(no_of_subsequences):\n    assert no_of_subsequences([1,2,3,4], 10) == 11\n    assert no_of_subsequences([4,8,7,2], 50) == 9\n    assert no_of_subsequences([5,6,7,8], 15) == 4\n    ", "type": "MBPP-V"}
{"id": 71, "path": "MBPP-V/images/071.png", "function_name": "Check_Solution(a,b,c)", "evaluation_function": "def check(Check_Solution):\n    assert Check_Solution(1,3,2) == \"Yes\"\n    assert Check_Solution(1,2,3) == \"No\"\n    assert Check_Solution(1,-5,6) == \"No\"\n    ", "type": "MBPP-V"}
{"id": 72, "path": "MBPP-V/images/072.png", "function_name": "find_Odd_Pair(A,N)", "evaluation_function": "def check(find_Odd_Pair):\n    assert find_Odd_Pair([5,4,7,2,1],5) == 6\n    assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\n    assert find_Odd_Pair([1,2,3],3) == 2\n    ", "type": "MBPP-V"}
{"id": 73, "path": "MBPP-V/images/073.png", "function_name": "average_Odd(n)", "evaluation_function": "def check(average_Odd):\n    assert average_Odd(9) == 5\n    assert average_Odd(5) == 3\n    assert average_Odd(11) == 6\n    ", "type": "MBPP-V"}
{"id": 74, "path": "MBPP-V/images/074.png", "function_name": "heap_sort(iterable)", "evaluation_function": "def check(heap_sort):\n    assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]\n    ", "type": "MBPP-V"}
{"id": 75, "path": "MBPP-V/images/075.png", "function_name": "list_split(S, step)", "evaluation_function": "def check(list_split):\n    assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n    assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \n    assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] \n    ", "type": "MBPP-V"}
{"id": 76, "path": "MBPP-V/images/076.png", "function_name": "fill_spaces(text)", "evaluation_function": "def check(fill_spaces):\n    assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\n    assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\n    assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'\n    ", "type": "MBPP-V"}
{"id": 77, "path": "MBPP-V/images/077.png", "function_name": "is_allowed_specific_char(string)", "evaluation_function": "def check(is_allowed_specific_char):\n    assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n    assert is_allowed_specific_char(\"*&%@#!}{\") == False\n    assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True\n    ", "type": "MBPP-V"}
{"id": 78, "path": "MBPP-V/images/078.png", "function_name": "sub_list(nums1,nums2)", "evaluation_function": "def check(sub_list):\n    assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n    assert sub_list([1,2],[3,4])==[-2,-2]\n    assert sub_list([90,120],[50,70])==[40,50]\n    ", "type": "MBPP-V"}
{"id": 79, "path": "MBPP-V/images/079.png", "function_name": "find_Rotations(str)", "evaluation_function": "def check(find_Rotations):\n    assert find_Rotations(\"aaaa\") == 1\n    assert find_Rotations(\"ab\") == 2\n    assert find_Rotations(\"abc\") == 3\n    ", "type": "MBPP-V"}
{"id": 80, "path": "MBPP-V/images/080.png", "function_name": "count_Occurrence(tup, lst)", "evaluation_function": "def check(count_Occurrence):\n    assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n    assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\n    assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2\n    ", "type": "MBPP-V"}
{"id": 81, "path": "MBPP-V/images/081.png", "function_name": "Split(list)", "evaluation_function": "def check(Split):\n    assert Split([1,2,3,4,5,6]) == [1,3,5]\n    assert Split([10,11,12,13]) == [11,13]\n    assert Split([7,8,9,1]) == [7,9,1]\n    ", "type": "MBPP-V"}
{"id": 82, "path": "MBPP-V/images/082.png", "function_name": "add_str(test_tup, K)", "evaluation_function": "def check(add_str):\n    assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\n    assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\n    assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']\n    ", "type": "MBPP-V"}
{"id": 83, "path": "MBPP-V/images/083.png", "function_name": "Extract(lst)", "evaluation_function": "def check(Extract):\n    assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\n    assert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\n    assert Extract([[1, 2, 3], [4, 5]]) == [3, 5]\n    ", "type": "MBPP-V"}
{"id": 84, "path": "MBPP-V/images/084.png", "function_name": "toggle_string(string)", "evaluation_function": "def check(toggle_string):\n    assert toggle_string(\"Python\")==(\"pYTHON\")\n    assert toggle_string(\"Pangram\")==(\"pANGRAM\")\n    assert toggle_string(\"LIttLE\")==(\"liTTle\")\n    ", "type": "MBPP-V"}
{"id": 85, "path": "MBPP-V/images/085.png", "function_name": "maximum_Sum(list1)", "evaluation_function": "def check(maximum_Sum):\n    assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n    assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\n    assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19\n    ", "type": "MBPP-V"}
{"id": 86, "path": "MBPP-V/images/086.png", "function_name": "count_Unset_Bits(n)", "evaluation_function": "def check(count_Unset_Bits):\n    assert count_Unset_Bits(2) == 1\n    assert count_Unset_Bits(5) == 4\n    assert count_Unset_Bits(14) == 17\n    ", "type": "MBPP-V"}
{"id": 87, "path": "MBPP-V/images/087.png", "function_name": "split_upperstring(text)", "evaluation_function": "def check(split_upperstring):\n    assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\n    assert split_upperstring(\"PythonProgram\")==['Python','Program']\n    assert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']\n    ", "type": "MBPP-V"}
{"id": 88, "path": "MBPP-V/images/088.png", "function_name": "max_sub_array_sum(a, size)", "evaluation_function": "def check(max_sub_array_sum):\n    assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n    assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\n    assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10\n    ", "type": "MBPP-V"}
{"id": 89, "path": "MBPP-V/images/089.png", "function_name": "sort_tuple(tup)", "evaluation_function": "def check(sort_tuple):\n    assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\n    assert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\n    assert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]\n    ", "type": "MBPP-V"}
{"id": 90, "path": "MBPP-V/images/090.png", "function_name": "power_base_sum(base, power)", "evaluation_function": "def check(power_base_sum):\n    assert power_base_sum(2,100)==115\n    assert power_base_sum(8,10)==37\n    assert power_base_sum(8,15)==62\n    ", "type": "MBPP-V"}
{"id": 91, "path": "MBPP-V/images/091.png", "function_name": "heap_sort(arr)", "evaluation_function": "def check(heap_sort):\n    assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\n    assert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\n    assert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]\n    ", "type": "MBPP-V"}
{"id": 92, "path": "MBPP-V/images/092.png", "function_name": "harmonic_sum(n)", "evaluation_function": "def check(harmonic_sum):\n    assert harmonic_sum(7) == 2.5928571428571425\n    assert harmonic_sum(4) == 2.083333333333333\n    assert harmonic_sum(19) == 3.547739657143682\n    ", "type": "MBPP-V"}
{"id": 93, "path": "MBPP-V/images/093.png", "function_name": "min_length_list(input_list)", "evaluation_function": "def check(min_length_list):\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n    assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\n    assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])\n    ", "type": "MBPP-V"}
{"id": 94, "path": "MBPP-V/images/094.png", "function_name": "merge_dictionaries_three(dict1,dict2, dict3)", "evaluation_function": "def check(merge_dictionaries_three):\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\n    ", "type": "MBPP-V"}
{"id": 95, "path": "MBPP-V/images/095.png", "function_name": "convert(list)", "evaluation_function": "def check(convert):\n    assert convert([1,2,3]) == 123\n    assert convert([4,5,6]) == 456\n    assert convert([7,8,9]) == 789\n    ", "type": "MBPP-V"}
{"id": 96, "path": "MBPP-V/images/096.png", "function_name": "jacobsthal_lucas(n)", "evaluation_function": "def check(jacobsthal_lucas):\n    assert jacobsthal_lucas(5) == 31\n    assert jacobsthal_lucas(2) == 5\n    assert jacobsthal_lucas(4) == 17\n    ", "type": "MBPP-V"}
{"id": 97, "path": "MBPP-V/images/097.png", "function_name": "find_rect_num(n)", "evaluation_function": "def check(find_rect_num):\n    assert find_rect_num(4) == 20\n    assert find_rect_num(5) == 30\n    assert find_rect_num(6) == 42\n    ", "type": "MBPP-V"}
{"id": 98, "path": "MBPP-V/images/098.png", "function_name": "neg_count(list)", "evaluation_function": "def check(neg_count):\n    assert neg_count([-1,-2,3,-4,-5]) == 4\n    assert neg_count([1,2,3]) == 0\n    assert neg_count([1,2,-3,-10,20]) == 2\n    ", "type": "MBPP-V"}
{"id": 99, "path": "MBPP-V/images/099.png", "function_name": "unique_sublists(list1)", "evaluation_function": "def check(unique_sublists):\n    assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}\n    ", "type": "MBPP-V"}
{"id": 100, "path": "MBPP-V/images/100.png", "function_name": "max_product(arr)", "evaluation_function": "def check(max_product):\n    assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\n    assert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\n    assert max_product([1, 3, 5, 6, 8, 9])==(8,9)\n    ", "type": "MBPP-V"}
{"id": 101, "path": "MBPP-V/images/101.png", "function_name": "get_median(arr1, arr2, n)", "evaluation_function": "def check(get_median):\n    assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n    ", "type": "MBPP-V"}
{"id": 102, "path": "MBPP-V/images/102.png", "function_name": "is_polite(n)", "evaluation_function": "def check(is_polite):\n    assert is_polite(7) == 11\n    assert is_polite(4) == 7\n    assert is_polite(9) == 13\n    ", "type": "MBPP-V"}
{"id": 103, "path": "MBPP-V/images/103.png", "function_name": "sum_in_Range(l,r)", "evaluation_function": "def check(sum_in_Range):\n    assert sum_in_Range(2,5) == 8\n    assert sum_in_Range(5,7) == 12\n    assert sum_in_Range(7,13) == 40\n    ", "type": "MBPP-V"}
{"id": 104, "path": "MBPP-V/images/104.png", "function_name": "negative_count(nums)", "evaluation_function": "def check(negative_count):\n    assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\n    assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\n    assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44\n    ", "type": "MBPP-V"}
{"id": 105, "path": "MBPP-V/images/105.png", "function_name": "smallest_missing(A, left_element, right_element)", "evaluation_function": "def check(smallest_missing):\n    assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\n    assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0\n    ", "type": "MBPP-V"}
{"id": 106, "path": "MBPP-V/images/106.png", "function_name": "Odd_Length_Sum(arr)", "evaluation_function": "def check(Odd_Length_Sum):\n    assert Odd_Length_Sum([1,2,4]) == 14\n    assert Odd_Length_Sum([1,2,1,2]) == 15\n    assert Odd_Length_Sum([1,7]) == 8\n    ", "type": "MBPP-V"}
{"id": 107, "path": "MBPP-V/images/107.png", "function_name": "last(arr,x,n)", "evaluation_function": "def check(last):\n    assert last([1,2,3],1,3) == 0\n    assert last([1,1,1,2,3,4],1,6) == 2\n    assert last([2,3,2,3,6,8,9],3,8) == 3\n    ", "type": "MBPP-V"}
{"id": 108, "path": "MBPP-V/images/108.png", "function_name": "check_String(str)", "evaluation_function": "def check(check_String):\n    assert check_String('thishasboth29') == True\n    assert check_String('python') == False\n    assert check_String ('string') == False\n    ", "type": "MBPP-V"}
{"id": 109, "path": "MBPP-V/images/109.png", "function_name": "min_Swaps(str1,str2)", "evaluation_function": "def check(min_Swaps):\n    assert min_Swaps(\"1101\",\"1110\") == 1\n    assert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\n    assert min_Swaps(\"1110000\",\"0001101\") == 3\n    ", "type": "MBPP-V"}
{"id": 110, "path": "MBPP-V/images/110.png", "function_name": "count_pairs(arr, n, k)", "evaluation_function": "def check(count_pairs):\n    assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n    assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\n    assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3\n    ", "type": "MBPP-V"}
{"id": 111, "path": "MBPP-V/images/111.png", "function_name": "mutiple_tuple(nums)", "evaluation_function": "def check(mutiple_tuple):\n    assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\n    assert mutiple_tuple((1,2,3)) == 6\n    assert mutiple_tuple((-2,-4,-6)) == -48\n    ", "type": "MBPP-V"}
{"id": 112, "path": "MBPP-V/images/112.png", "function_name": "is_sublist(l, s)", "evaluation_function": "def check(is_sublist):\n    assert is_sublist([2,4,3,5,7],[3,7])==False\n    assert is_sublist([2,4,3,5,7],[4,3])==True\n    assert is_sublist([2,4,3,5,7],[1,6])==False\n    ", "type": "MBPP-V"}
{"id": 113, "path": "MBPP-V/images/113.png", "function_name": "concatenate_strings(test_tup1, test_tup2)", "evaluation_function": "def check(concatenate_strings):\n    assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n    assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\n    assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')\n    ", "type": "MBPP-V"}
{"id": 114, "path": "MBPP-V/images/114.png", "function_name": "count_bidirectional(test_list)", "evaluation_function": "def check(count_bidirectional):\n    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n    assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\n    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'\n    ", "type": "MBPP-V"}
{"id": 115, "path": "MBPP-V/images/115.png", "function_name": "remove_tuples(test_list, K)", "evaluation_function": "def check(remove_tuples):\n    assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\n    assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]\n    ", "type": "MBPP-V"}
{"id": 116, "path": "MBPP-V/images/116.png", "function_name": "max_subarray_product(arr)", "evaluation_function": "def check(max_subarray_product):\n    assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n    assert max_subarray_product([6, -3, -10, 0, 2]) == 180 \n    assert max_subarray_product([-2, -40, 0, -2, -3]) == 80\n    ", "type": "MBPP-V"}
{"id": 117, "path": "MBPP-V/images/117.png", "function_name": "specified_element(nums, N)", "evaluation_function": "def check(specified_element):\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]\n    ", "type": "MBPP-V"}
{"id": 118, "path": "MBPP-V/images/118.png", "function_name": "check_type(test_tuple)", "evaluation_function": "def check(check_type):\n    assert check_type((5, 6, 7, 3, 5, 6) ) == True\n    assert check_type((1, 2, \"4\") ) == False\n    assert check_type((3, 2, 1, 4, 5) ) == True\n    ", "type": "MBPP-V"}
{"id": 119, "path": "MBPP-V/images/119.png", "function_name": "remove_even(str1)", "evaluation_function": "def check(remove_even):\n    assert remove_even(\"python\")==(\"pto\")\n    assert remove_even(\"program\")==(\"porm\")\n    assert remove_even(\"language\")==(\"lnug\")\n    ", "type": "MBPP-V"}
{"id": 0, "path": "GSM8K-V/images/000.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 2", "type": "GSM8K-V"}
{"id": 1, "path": "GSM8K-V/images/001.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 36", "type": "GSM8K-V"}
{"id": 2, "path": "GSM8K-V/images/002.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 200", "type": "GSM8K-V"}
{"id": 3, "path": "GSM8K-V/images/003.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 34", "type": "GSM8K-V"}
{"id": 4, "path": "GSM8K-V/images/004.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 66", "type": "GSM8K-V"}
{"id": 5, "path": "GSM8K-V/images/005.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 10", "type": "GSM8K-V"}
{"id": 6, "path": "GSM8K-V/images/006.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 160", "type": "GSM8K-V"}
{"id": 7, "path": "GSM8K-V/images/007.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 101", "type": "GSM8K-V"}
{"id": 8, "path": "GSM8K-V/images/008.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 420", "type": "GSM8K-V"}
{"id": 9, "path": "GSM8K-V/images/009.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 85", "type": "GSM8K-V"}
{"id": 10, "path": "GSM8K-V/images/010.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 240", "type": "GSM8K-V"}
{"id": 11, "path": "GSM8K-V/images/011.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 60", "type": "GSM8K-V"}
{"id": 12, "path": "GSM8K-V/images/012.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 750", "type": "GSM8K-V"}
{"id": 13, "path": "GSM8K-V/images/013.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 96", "type": "GSM8K-V"}
{"id": 14, "path": "GSM8K-V/images/014.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 9", "type": "GSM8K-V"}
{"id": 15, "path": "GSM8K-V/images/015.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 93", "type": "GSM8K-V"}
{"id": 16, "path": "GSM8K-V/images/016.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 20", "type": "GSM8K-V"}
{"id": 17, "path": "GSM8K-V/images/017.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 120", "type": "GSM8K-V"}
{"id": 18, "path": "GSM8K-V/images/018.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 3", "type": "GSM8K-V"}
{"id": 19, "path": "GSM8K-V/images/019.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 12", "type": "GSM8K-V"}
{"id": 20, "path": "GSM8K-V/images/020.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 1248", "type": "GSM8K-V"}
{"id": 21, "path": "GSM8K-V/images/021.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 2350", "type": "GSM8K-V"}
{"id": 22, "path": "GSM8K-V/images/022.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 6", "type": "GSM8K-V"}
{"id": 23, "path": "GSM8K-V/images/023.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 5", "type": "GSM8K-V"}
{"id": 24, "path": "GSM8K-V/images/024.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 320", "type": "GSM8K-V"}
{"id": 25, "path": "GSM8K-V/images/025.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 19", "type": "GSM8K-V"}
{"id": 26, "path": "GSM8K-V/images/026.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 40,000", "type": "GSM8K-V"}
{"id": 27, "path": "GSM8K-V/images/027.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 5", "type": "GSM8K-V"}
{"id": 28, "path": "GSM8K-V/images/028.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 84", "type": "GSM8K-V"}
{"id": 29, "path": "GSM8K-V/images/029.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 56", "type": "GSM8K-V"}
{"id": 30, "path": "GSM8K-V/images/030.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 22", "type": "GSM8K-V"}
{"id": 31, "path": "GSM8K-V/images/031.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 12", "type": "GSM8K-V"}
{"id": 32, "path": "GSM8K-V/images/032.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 210", "type": "GSM8K-V"}
{"id": 33, "path": "GSM8K-V/images/033.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 3528", "type": "GSM8K-V"}
{"id": 34, "path": "GSM8K-V/images/034.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 296", "type": "GSM8K-V"}
{"id": 35, "path": "GSM8K-V/images/035.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 7", "type": "GSM8K-V"}
{"id": 36, "path": "GSM8K-V/images/036.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 1218", "type": "GSM8K-V"}
{"id": 37, "path": "GSM8K-V/images/037.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 90", "type": "GSM8K-V"}
{"id": 38, "path": "GSM8K-V/images/038.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 30", "type": "GSM8K-V"}
{"id": 39, "path": "GSM8K-V/images/039.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 594", "type": "GSM8K-V"}
{"id": 40, "path": "GSM8K-V/images/040.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 720", "type": "GSM8K-V"}
{"id": 41, "path": "GSM8K-V/images/041.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 105", "type": "GSM8K-V"}
{"id": 42, "path": "GSM8K-V/images/042.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 272", "type": "GSM8K-V"}
{"id": 43, "path": "GSM8K-V/images/043.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 280", "type": "GSM8K-V"}
{"id": 44, "path": "GSM8K-V/images/044.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 5", "type": "GSM8K-V"}
{"id": 45, "path": "GSM8K-V/images/045.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 30", "type": "GSM8K-V"}
{"id": 46, "path": "GSM8K-V/images/046.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 6", "type": "GSM8K-V"}
{"id": 47, "path": "GSM8K-V/images/047.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 860", "type": "GSM8K-V"}
{"id": 48, "path": "GSM8K-V/images/048.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 15", "type": "GSM8K-V"}
{"id": 49, "path": "GSM8K-V/images/049.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 21", "type": "GSM8K-V"}
{"id": 50, "path": "GSM8K-V/images/050.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 27000", "type": "GSM8K-V"}
{"id": 51, "path": "GSM8K-V/images/051.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 70", "type": "GSM8K-V"}
{"id": 52, "path": "GSM8K-V/images/052.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 62", "type": "GSM8K-V"}
{"id": 53, "path": "GSM8K-V/images/053.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 83", "type": "GSM8K-V"}
{"id": 54, "path": "GSM8K-V/images/054.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 16", "type": "GSM8K-V"}
{"id": 55, "path": "GSM8K-V/images/055.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 8400", "type": "GSM8K-V"}
{"id": 56, "path": "GSM8K-V/images/056.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 310", "type": "GSM8K-V"}
{"id": 57, "path": "GSM8K-V/images/057.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 9", "type": "GSM8K-V"}
{"id": 58, "path": "GSM8K-V/images/058.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 67", "type": "GSM8K-V"}
{"id": 59, "path": "GSM8K-V/images/059.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 80", "type": "GSM8K-V"}
{"id": 60, "path": "GSM8K-V/images/060.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 18", "type": "GSM8K-V"}
{"id": 61, "path": "GSM8K-V/images/061.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 25", "type": "GSM8K-V"}
{"id": 62, "path": "GSM8K-V/images/062.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 17000", "type": "GSM8K-V"}
{"id": 63, "path": "GSM8K-V/images/063.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 13", "type": "GSM8K-V"}
{"id": 64, "path": "GSM8K-V/images/064.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 20", "type": "GSM8K-V"}
{"id": 65, "path": "GSM8K-V/images/065.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 80", "type": "GSM8K-V"}
{"id": 66, "path": "GSM8K-V/images/066.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 59", "type": "GSM8K-V"}
{"id": 67, "path": "GSM8K-V/images/067.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 3", "type": "GSM8K-V"}
{"id": 68, "path": "GSM8K-V/images/068.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 80", "type": "GSM8K-V"}
{"id": 69, "path": "GSM8K-V/images/069.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 20", "type": "GSM8K-V"}
{"id": 70, "path": "GSM8K-V/images/070.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 2", "type": "GSM8K-V"}
{"id": 71, "path": "GSM8K-V/images/071.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 63", "type": "GSM8K-V"}
{"id": 72, "path": "GSM8K-V/images/072.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 66", "type": "GSM8K-V"}
{"id": 73, "path": "GSM8K-V/images/073.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 7", "type": "GSM8K-V"}
{"id": 74, "path": "GSM8K-V/images/074.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 2", "type": "GSM8K-V"}
{"id": 75, "path": "GSM8K-V/images/075.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 120", "type": "GSM8K-V"}
{"id": 76, "path": "GSM8K-V/images/076.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 319", "type": "GSM8K-V"}
{"id": 77, "path": "GSM8K-V/images/077.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 12", "type": "GSM8K-V"}
{"id": 78, "path": "GSM8K-V/images/078.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 10", "type": "GSM8K-V"}
{"id": 79, "path": "GSM8K-V/images/079.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 8", "type": "GSM8K-V"}
{"id": 80, "path": "GSM8K-V/images/080.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 5", "type": "GSM8K-V"}
{"id": 81, "path": "GSM8K-V/images/081.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 45", "type": "GSM8K-V"}
{"id": 82, "path": "GSM8K-V/images/082.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 14", "type": "GSM8K-V"}
{"id": 83, "path": "GSM8K-V/images/083.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 10", "type": "GSM8K-V"}
{"id": 84, "path": "GSM8K-V/images/084.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 80", "type": "GSM8K-V"}
{"id": 85, "path": "GSM8K-V/images/085.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 2", "type": "GSM8K-V"}
{"id": 86, "path": "GSM8K-V/images/086.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 5", "type": "GSM8K-V"}
{"id": 87, "path": "GSM8K-V/images/087.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 18", "type": "GSM8K-V"}
{"id": 88, "path": "GSM8K-V/images/088.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 2", "type": "GSM8K-V"}
{"id": 89, "path": "GSM8K-V/images/089.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 60000", "type": "GSM8K-V"}
{"id": 90, "path": "GSM8K-V/images/090.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 14", "type": "GSM8K-V"}
{"id": 91, "path": "GSM8K-V/images/091.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 255", "type": "GSM8K-V"}
{"id": 92, "path": "GSM8K-V/images/092.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 20", "type": "GSM8K-V"}
{"id": 93, "path": "GSM8K-V/images/093.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 52", "type": "GSM8K-V"}
{"id": 94, "path": "GSM8K-V/images/094.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 27", "type": "GSM8K-V"}
{"id": 95, "path": "GSM8K-V/images/095.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 600", "type": "GSM8K-V"}
{"id": 96, "path": "GSM8K-V/images/096.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 11", "type": "GSM8K-V"}
{"id": 97, "path": "GSM8K-V/images/097.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 123", "type": "GSM8K-V"}
{"id": 98, "path": "GSM8K-V/images/098.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 13", "type": "GSM8K-V"}
{"id": 99, "path": "GSM8K-V/images/099.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 28", "type": "GSM8K-V"}
{"id": 100, "path": "GSM8K-V/images/100.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 575", "type": "GSM8K-V"}
{"id": 101, "path": "GSM8K-V/images/101.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 24", "type": "GSM8K-V"}
{"id": 102, "path": "GSM8K-V/images/102.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 74", "type": "GSM8K-V"}
{"id": 103, "path": "GSM8K-V/images/103.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 16", "type": "GSM8K-V"}
{"id": 104, "path": "GSM8K-V/images/104.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 14", "type": "GSM8K-V"}
{"id": 105, "path": "GSM8K-V/images/105.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 2000", "type": "GSM8K-V"}
{"id": 106, "path": "GSM8K-V/images/106.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 85000", "type": "GSM8K-V"}
{"id": 107, "path": "GSM8K-V/images/107.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 410", "type": "GSM8K-V"}
{"id": 108, "path": "GSM8K-V/images/108.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 450", "type": "GSM8K-V"}
{"id": 109, "path": "GSM8K-V/images/109.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 1000", "type": "GSM8K-V"}
{"id": 110, "path": "GSM8K-V/images/110.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 374", "type": "GSM8K-V"}
{"id": 111, "path": "GSM8K-V/images/111.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 30", "type": "GSM8K-V"}
{"id": 112, "path": "GSM8K-V/images/112.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 100", "type": "GSM8K-V"}
{"id": 113, "path": "GSM8K-V/images/113.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 15", "type": "GSM8K-V"}
{"id": 0, "path": "MATH-V/images/000.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 57", "type": "MATH-V"}
{"id": 1, "path": "MATH-V/images/001.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 8", "type": "MATH-V"}
{"id": 2, "path": "MATH-V/images/002.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 5", "type": "MATH-V"}
{"id": 3, "path": "MATH-V/images/003.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'A'", "type": "MATH-V"}
{"id": 4, "path": "MATH-V/images/004.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 750", "type": "MATH-V"}
{"id": 5, "path": "MATH-V/images/005.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'E'", "type": "MATH-V"}
{"id": 6, "path": "MATH-V/images/006.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'A'", "type": "MATH-V"}
{"id": 7, "path": "MATH-V/images/007.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 4", "type": "MATH-V"}
{"id": 8, "path": "MATH-V/images/008.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'E'", "type": "MATH-V"}
{"id": 9, "path": "MATH-V/images/009.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 222", "type": "MATH-V"}
{"id": 10, "path": "MATH-V/images/010.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'D'", "type": "MATH-V"}
{"id": 11, "path": "MATH-V/images/011.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'A'", "type": "MATH-V"}
{"id": 12, "path": "MATH-V/images/012.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 61", "type": "MATH-V"}
{"id": 13, "path": "MATH-V/images/013.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'C'", "type": "MATH-V"}
{"id": 14, "path": "MATH-V/images/014.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 19", "type": "MATH-V"}
{"id": 15, "path": "MATH-V/images/015.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 5", "type": "MATH-V"}
{"id": 16, "path": "MATH-V/images/016.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'D'", "type": "MATH-V"}
{"id": 17, "path": "MATH-V/images/017.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'D'", "type": "MATH-V"}
{"id": 18, "path": "MATH-V/images/018.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 10", "type": "MATH-V"}
{"id": 19, "path": "MATH-V/images/019.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 22", "type": "MATH-V"}
{"id": 20, "path": "MATH-V/images/020.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'D'", "type": "MATH-V"}
{"id": 21, "path": "MATH-V/images/021.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'D'", "type": "MATH-V"}
{"id": 22, "path": "MATH-V/images/022.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'C'", "type": "MATH-V"}
{"id": 23, "path": "MATH-V/images/023.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 2", "type": "MATH-V"}
{"id": 24, "path": "MATH-V/images/024.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'E'", "type": "MATH-V"}
{"id": 25, "path": "MATH-V/images/025.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'E'", "type": "MATH-V"}
{"id": 26, "path": "MATH-V/images/026.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'E'", "type": "MATH-V"}
{"id": 27, "path": "MATH-V/images/027.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 80", "type": "MATH-V"}
{"id": 28, "path": "MATH-V/images/028.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 42", "type": "MATH-V"}
{"id": 29, "path": "MATH-V/images/029.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 4028", "type": "MATH-V"}
{"id": 30, "path": "MATH-V/images/030.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 95", "type": "MATH-V"}
{"id": 31, "path": "MATH-V/images/031.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 3", "type": "MATH-V"}
{"id": 32, "path": "MATH-V/images/032.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == '2.5'", "type": "MATH-V"}
{"id": 33, "path": "MATH-V/images/033.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'C'", "type": "MATH-V"}
{"id": 34, "path": "MATH-V/images/034.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'D'", "type": "MATH-V"}
{"id": 35, "path": "MATH-V/images/035.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 6", "type": "MATH-V"}
{"id": 36, "path": "MATH-V/images/036.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 6", "type": "MATH-V"}
{"id": 37, "path": "MATH-V/images/037.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 4", "type": "MATH-V"}
{"id": 38, "path": "MATH-V/images/038.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 2", "type": "MATH-V"}
{"id": 39, "path": "MATH-V/images/039.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'D'", "type": "MATH-V"}
{"id": 40, "path": "MATH-V/images/040.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 9", "type": "MATH-V"}
{"id": 41, "path": "MATH-V/images/041.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'A'", "type": "MATH-V"}
{"id": 42, "path": "MATH-V/images/042.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'A'", "type": "MATH-V"}
{"id": 43, "path": "MATH-V/images/043.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'D'", "type": "MATH-V"}
{"id": 44, "path": "MATH-V/images/044.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 40", "type": "MATH-V"}
{"id": 45, "path": "MATH-V/images/045.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'E'", "type": "MATH-V"}
{"id": 46, "path": "MATH-V/images/046.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 26", "type": "MATH-V"}
{"id": 47, "path": "MATH-V/images/047.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'E'", "type": "MATH-V"}
{"id": 48, "path": "MATH-V/images/048.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 3", "type": "MATH-V"}
{"id": 49, "path": "MATH-V/images/049.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 16", "type": "MATH-V"}
{"id": 50, "path": "MATH-V/images/050.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 5", "type": "MATH-V"}
{"id": 51, "path": "MATH-V/images/051.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'B'", "type": "MATH-V"}
{"id": 52, "path": "MATH-V/images/052.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'B'", "type": "MATH-V"}
{"id": 53, "path": "MATH-V/images/053.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'A'", "type": "MATH-V"}
{"id": 54, "path": "MATH-V/images/054.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 21", "type": "MATH-V"}
{"id": 55, "path": "MATH-V/images/055.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 14", "type": "MATH-V"}
{"id": 56, "path": "MATH-V/images/056.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 45", "type": "MATH-V"}
{"id": 57, "path": "MATH-V/images/057.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'B'", "type": "MATH-V"}
{"id": 58, "path": "MATH-V/images/058.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'E'", "type": "MATH-V"}
{"id": 59, "path": "MATH-V/images/059.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'E'", "type": "MATH-V"}
{"id": 60, "path": "MATH-V/images/060.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 6", "type": "MATH-V"}
{"id": 61, "path": "MATH-V/images/061.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 12", "type": "MATH-V"}
{"id": 62, "path": "MATH-V/images/062.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 82", "type": "MATH-V"}
{"id": 63, "path": "MATH-V/images/063.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 21", "type": "MATH-V"}
{"id": 64, "path": "MATH-V/images/064.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 6", "type": "MATH-V"}
{"id": 65, "path": "MATH-V/images/065.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'B'", "type": "MATH-V"}
{"id": 66, "path": "MATH-V/images/066.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 5", "type": "MATH-V"}
{"id": 67, "path": "MATH-V/images/067.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 950", "type": "MATH-V"}
{"id": 68, "path": "MATH-V/images/068.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 16", "type": "MATH-V"}
{"id": 69, "path": "MATH-V/images/069.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 4", "type": "MATH-V"}
{"id": 70, "path": "MATH-V/images/070.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'B'", "type": "MATH-V"}
{"id": 71, "path": "MATH-V/images/071.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 4", "type": "MATH-V"}
{"id": 72, "path": "MATH-V/images/072.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'D'", "type": "MATH-V"}
{"id": 73, "path": "MATH-V/images/073.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 34", "type": "MATH-V"}
{"id": 74, "path": "MATH-V/images/074.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'B'", "type": "MATH-V"}
{"id": 75, "path": "MATH-V/images/075.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 4", "type": "MATH-V"}
{"id": 76, "path": "MATH-V/images/076.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'E'", "type": "MATH-V"}
{"id": 77, "path": "MATH-V/images/077.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'A'", "type": "MATH-V"}
{"id": 78, "path": "MATH-V/images/078.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 67", "type": "MATH-V"}
{"id": 79, "path": "MATH-V/images/079.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 42", "type": "MATH-V"}
{"id": 80, "path": "MATH-V/images/080.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'A'", "type": "MATH-V"}
{"id": 81, "path": "MATH-V/images/081.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 9", "type": "MATH-V"}
{"id": 82, "path": "MATH-V/images/082.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'C'", "type": "MATH-V"}
{"id": 83, "path": "MATH-V/images/083.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'A'", "type": "MATH-V"}
{"id": 84, "path": "MATH-V/images/084.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 11", "type": "MATH-V"}
{"id": 85, "path": "MATH-V/images/085.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 30", "type": "MATH-V"}
{"id": 86, "path": "MATH-V/images/086.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'D'", "type": "MATH-V"}
{"id": 87, "path": "MATH-V/images/087.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 9", "type": "MATH-V"}
{"id": 88, "path": "MATH-V/images/088.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 'C'", "type": "MATH-V"}
{"id": 89, "path": "MATH-V/images/089.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 4", "type": "MATH-V"}
{"id": 90, "path": "MATH-V/images/090.png", "function_name": "get_answer", "evaluation_function": "def check(candidate):\n    assert candidate() == 12", "type": "MATH-V"}
{"id": 0, "path": "SVG/images/000.png", "type": "SVG"}
{"id": 1, "path": "SVG/images/001.png", "type": "SVG"}
{"id": 2, "path": "SVG/images/002.png", "type": "SVG"}
{"id": 3, "path": "SVG/images/003.png", "type": "SVG"}
{"id": 4, "path": "SVG/images/004.png", "type": "SVG"}
{"id": 5, "path": "SVG/images/005.png", "type": "SVG"}
{"id": 6, "path": "SVG/images/006.png", "type": "SVG"}
{"id": 7, "path": "SVG/images/007.png", "type": "SVG"}
{"id": 8, "path": "SVG/images/008.png", "type": "SVG"}
{"id": 9, "path": "SVG/images/009.png", "type": "SVG"}
{"id": 10, "path": "SVG/images/010.png", "type": "SVG"}
{"id": 11, "path": "SVG/images/011.png", "type": "SVG"}
{"id": 12, "path": "SVG/images/012.png", "type": "SVG"}
{"id": 13, "path": "SVG/images/013.png", "type": "SVG"}
{"id": 14, "path": "SVG/images/014.png", "type": "SVG"}
{"id": 15, "path": "SVG/images/015.png", "type": "SVG"}
{"id": 16, "path": "SVG/images/016.png", "type": "SVG"}
{"id": 17, "path": "SVG/images/017.png", "type": "SVG"}
{"id": 18, "path": "SVG/images/018.png", "type": "SVG"}
{"id": 19, "path": "SVG/images/019.png", "type": "SVG"}
{"id": 20, "path": "SVG/images/020.png", "type": "SVG"}
{"id": 21, "path": "SVG/images/021.png", "type": "SVG"}
{"id": 22, "path": "SVG/images/022.png", "type": "SVG"}
{"id": 23, "path": "SVG/images/023.png", "type": "SVG"}
{"id": 24, "path": "SVG/images/024.png", "type": "SVG"}
{"id": 25, "path": "SVG/images/025.png", "type": "SVG"}
{"id": 26, "path": "SVG/images/026.png", "type": "SVG"}
{"id": 27, "path": "SVG/images/027.png", "type": "SVG"}
{"id": 28, "path": "SVG/images/028.png", "type": "SVG"}
{"id": 29, "path": "SVG/images/029.png", "type": "SVG"}
{"id": 30, "path": "SVG/images/030.png", "type": "SVG"}
{"id": 31, "path": "SVG/images/031.png", "type": "SVG"}
{"id": 32, "path": "SVG/images/032.png", "type": "SVG"}
{"id": 33, "path": "SVG/images/033.png", "type": "SVG"}
{"id": 34, "path": "SVG/images/034.png", "type": "SVG"}
{"id": 35, "path": "SVG/images/035.png", "type": "SVG"}
{"id": 36, "path": "SVG/images/036.png", "type": "SVG"}
{"id": 37, "path": "SVG/images/037.png", "type": "SVG"}
{"id": 38, "path": "SVG/images/038.png", "type": "SVG"}
{"id": 39, "path": "SVG/images/039.png", "type": "SVG"}
{"id": 40, "path": "SVG/images/040.png", "type": "SVG"}
{"id": 41, "path": "SVG/images/041.png", "type": "SVG"}
{"id": 42, "path": "SVG/images/042.png", "type": "SVG"}
{"id": 43, "path": "SVG/images/043.png", "type": "SVG"}
{"id": 44, "path": "SVG/images/044.png", "type": "SVG"}
{"id": 45, "path": "SVG/images/045.png", "type": "SVG"}
{"id": 46, "path": "SVG/images/046.png", "type": "SVG"}
{"id": 47, "path": "SVG/images/047.png", "type": "SVG"}
{"id": 48, "path": "SVG/images/048.png", "type": "SVG"}
{"id": 49, "path": "SVG/images/049.png", "type": "SVG"}
{"id": 50, "path": "SVG/images/050.png", "type": "SVG"}
{"id": 51, "path": "SVG/images/051.png", "type": "SVG"}
{"id": 52, "path": "SVG/images/052.png", "type": "SVG"}
{"id": 53, "path": "SVG/images/053.png", "type": "SVG"}
{"id": 54, "path": "SVG/images/054.png", "type": "SVG"}
{"id": 55, "path": "SVG/images/055.png", "type": "SVG"}
{"id": 56, "path": "SVG/images/056.png", "type": "SVG"}
{"id": 57, "path": "SVG/images/057.png", "type": "SVG"}
{"id": 58, "path": "SVG/images/058.png", "type": "SVG"}
{"id": 59, "path": "SVG/images/059.png", "type": "SVG"}
{"id": 60, "path": "SVG/images/060.png", "type": "SVG"}
{"id": 61, "path": "SVG/images/061.png", "type": "SVG"}
{"id": 62, "path": "SVG/images/062.png", "type": "SVG"}
{"id": 63, "path": "SVG/images/063.png", "type": "SVG"}
{"id": 64, "path": "SVG/images/064.png", "type": "SVG"}
{"id": 65, "path": "SVG/images/065.png", "type": "SVG"}
{"id": 66, "path": "SVG/images/066.png", "type": "SVG"}
{"id": 67, "path": "SVG/images/067.png", "type": "SVG"}
{"id": 68, "path": "SVG/images/068.png", "type": "SVG"}
{"id": 69, "path": "SVG/images/069.png", "type": "SVG"}
{"id": 70, "path": "SVG/images/070.png", "type": "SVG"}
{"id": 71, "path": "SVG/images/071.png", "type": "SVG"}
{"id": 72, "path": "SVG/images/072.png", "type": "SVG"}
{"id": 73, "path": "SVG/images/073.png", "type": "SVG"}
{"id": 74, "path": "SVG/images/074.png", "type": "SVG"}
{"id": 75, "path": "SVG/images/075.png", "type": "SVG"}
{"id": 76, "path": "SVG/images/076.png", "type": "SVG"}
{"id": 77, "path": "SVG/images/077.png", "type": "SVG"}
{"id": 78, "path": "SVG/images/078.png", "type": "SVG"}
{"id": 79, "path": "SVG/images/079.png", "type": "SVG"}
{"id": 80, "path": "SVG/images/080.png", "type": "SVG"}
{"id": 81, "path": "SVG/images/081.png", "type": "SVG"}
{"id": 82, "path": "SVG/images/082.png", "type": "SVG"}
{"id": 83, "path": "SVG/images/083.png", "type": "SVG"}
{"id": 84, "path": "SVG/images/084.png", "type": "SVG"}
{"id": 85, "path": "SVG/images/085.png", "type": "SVG"}
{"id": 86, "path": "SVG/images/086.png", "type": "SVG"}
{"id": 87, "path": "SVG/images/087.png", "type": "SVG"}
{"id": 88, "path": "SVG/images/088.png", "type": "SVG"}
{"id": 89, "path": "SVG/images/089.png", "type": "SVG"}
{"id": 90, "path": "SVG/images/090.png", "type": "SVG"}
{"id": 91, "path": "SVG/images/091.png", "type": "SVG"}
{"id": 92, "path": "SVG/images/092.png", "type": "SVG"}
{"id": 93, "path": "SVG/images/093.png", "type": "SVG"}
{"id": 94, "path": "SVG/images/094.png", "type": "SVG"}
{"id": 95, "path": "SVG/images/095.png", "type": "SVG"}
{"id": 96, "path": "SVG/images/096.png", "type": "SVG"}
{"id": 97, "path": "SVG/images/097.png", "type": "SVG"}
{"id": 98, "path": "SVG/images/098.png", "type": "SVG"}
{"id": 99, "path": "SVG/images/099.png", "type": "SVG"}
{"id": 100, "path": "SVG/images/100.png", "type": "SVG"}
{"id": 101, "path": "SVG/images/101.png", "type": "SVG"}
{"id": 102, "path": "SVG/images/102.png", "type": "SVG"}
{"id": 103, "path": "SVG/images/103.png", "type": "SVG"}
{"id": 104, "path": "SVG/images/104.png", "type": "SVG"}
{"id": 105, "path": "SVG/images/105.png", "type": "SVG"}
{"id": 0, "path": "TikZ/images/000.png", "type": "TikZ"}
{"id": 1, "path": "TikZ/images/001.png", "type": "TikZ"}
{"id": 2, "path": "TikZ/images/002.png", "type": "TikZ"}
{"id": 3, "path": "TikZ/images/003.png", "type": "TikZ"}
{"id": 4, "path": "TikZ/images/004.png", "type": "TikZ"}
{"id": 5, "path": "TikZ/images/005.png", "type": "TikZ"}
{"id": 6, "path": "TikZ/images/006.png", "type": "TikZ"}
{"id": 7, "path": "TikZ/images/007.png", "type": "TikZ"}
{"id": 8, "path": "TikZ/images/008.png", "type": "TikZ"}
{"id": 9, "path": "TikZ/images/009.png", "type": "TikZ"}
{"id": 10, "path": "TikZ/images/010.png", "type": "TikZ"}
{"id": 11, "path": "TikZ/images/011.png", "type": "TikZ"}
{"id": 12, "path": "TikZ/images/012.png", "type": "TikZ"}
{"id": 13, "path": "TikZ/images/013.png", "type": "TikZ"}
{"id": 14, "path": "TikZ/images/014.png", "type": "TikZ"}
{"id": 15, "path": "TikZ/images/015.png", "type": "TikZ"}
{"id": 16, "path": "TikZ/images/016.png", "type": "TikZ"}
{"id": 17, "path": "TikZ/images/017.png", "type": "TikZ"}
{"id": 18, "path": "TikZ/images/018.png", "type": "TikZ"}
{"id": 19, "path": "TikZ/images/019.png", "type": "TikZ"}
{"id": 20, "path": "TikZ/images/020.png", "type": "TikZ"}
{"id": 21, "path": "TikZ/images/021.png", "type": "TikZ"}
{"id": 22, "path": "TikZ/images/022.png", "type": "TikZ"}
{"id": 23, "path": "TikZ/images/023.png", "type": "TikZ"}
{"id": 24, "path": "TikZ/images/024.png", "type": "TikZ"}
{"id": 25, "path": "TikZ/images/025.png", "type": "TikZ"}
{"id": 26, "path": "TikZ/images/026.png", "type": "TikZ"}
{"id": 27, "path": "TikZ/images/027.png", "type": "TikZ"}
{"id": 28, "path": "TikZ/images/028.png", "type": "TikZ"}
{"id": 29, "path": "TikZ/images/029.png", "type": "TikZ"}
{"id": 30, "path": "TikZ/images/030.png", "type": "TikZ"}
{"id": 31, "path": "TikZ/images/031.png", "type": "TikZ"}
{"id": 32, "path": "TikZ/images/032.png", "type": "TikZ"}
{"id": 33, "path": "TikZ/images/033.png", "type": "TikZ"}
{"id": 34, "path": "TikZ/images/034.png", "type": "TikZ"}
{"id": 35, "path": "TikZ/images/035.png", "type": "TikZ"}
{"id": 36, "path": "TikZ/images/036.png", "type": "TikZ"}
{"id": 37, "path": "TikZ/images/037.png", "type": "TikZ"}
{"id": 38, "path": "TikZ/images/038.png", "type": "TikZ"}
{"id": 39, "path": "TikZ/images/039.png", "type": "TikZ"}
{"id": 40, "path": "TikZ/images/040.png", "type": "TikZ"}
{"id": 41, "path": "TikZ/images/041.png", "type": "TikZ"}
{"id": 42, "path": "TikZ/images/042.png", "type": "TikZ"}
{"id": 43, "path": "TikZ/images/043.png", "type": "TikZ"}
{"id": 44, "path": "TikZ/images/044.png", "type": "TikZ"}
{"id": 45, "path": "TikZ/images/045.png", "type": "TikZ"}
{"id": 46, "path": "TikZ/images/046.png", "type": "TikZ"}
{"id": 47, "path": "TikZ/images/047.png", "type": "TikZ"}
{"id": 48, "path": "TikZ/images/048.png", "type": "TikZ"}
{"id": 49, "path": "TikZ/images/049.png", "type": "TikZ"}
{"id": 50, "path": "TikZ/images/050.png", "type": "TikZ"}
{"id": 51, "path": "TikZ/images/051.png", "type": "TikZ"}
{"id": 52, "path": "TikZ/images/052.png", "type": "TikZ"}
{"id": 53, "path": "TikZ/images/053.png", "type": "TikZ"}
{"id": 54, "path": "TikZ/images/054.png", "type": "TikZ"}
{"id": 55, "path": "TikZ/images/055.png", "type": "TikZ"}
{"id": 56, "path": "TikZ/images/056.png", "type": "TikZ"}
{"id": 57, "path": "TikZ/images/057.png", "type": "TikZ"}
{"id": 58, "path": "TikZ/images/058.png", "type": "TikZ"}
{"id": 59, "path": "TikZ/images/059.png", "type": "TikZ"}
{"id": 60, "path": "TikZ/images/060.png", "type": "TikZ"}
{"id": 61, "path": "TikZ/images/061.png", "type": "TikZ"}
{"id": 62, "path": "TikZ/images/062.png", "type": "TikZ"}
{"id": 63, "path": "TikZ/images/063.png", "type": "TikZ"}
{"id": 64, "path": "TikZ/images/064.png", "type": "TikZ"}
{"id": 65, "path": "TikZ/images/065.png", "type": "TikZ"}
{"id": 66, "path": "TikZ/images/066.png", "type": "TikZ"}
{"id": 67, "path": "TikZ/images/067.png", "type": "TikZ"}
{"id": 68, "path": "TikZ/images/068.png", "type": "TikZ"}
{"id": 69, "path": "TikZ/images/069.png", "type": "TikZ"}
{"id": 70, "path": "TikZ/images/070.png", "type": "TikZ"}
{"id": 71, "path": "TikZ/images/071.png", "type": "TikZ"}
{"id": 72, "path": "TikZ/images/072.png", "type": "TikZ"}
{"id": 73, "path": "TikZ/images/073.png", "type": "TikZ"}
{"id": 74, "path": "TikZ/images/074.png", "type": "TikZ"}
{"id": 75, "path": "TikZ/images/075.png", "type": "TikZ"}
{"id": 76, "path": "TikZ/images/076.png", "type": "TikZ"}
{"id": 77, "path": "TikZ/images/077.png", "type": "TikZ"}
{"id": 78, "path": "TikZ/images/078.png", "type": "TikZ"}
{"id": 79, "path": "TikZ/images/079.png", "type": "TikZ"}
{"id": 80, "path": "TikZ/images/080.png", "type": "TikZ"}
{"id": 81, "path": "TikZ/images/081.png", "type": "TikZ"}
{"id": 82, "path": "TikZ/images/082.png", "type": "TikZ"}
{"id": 83, "path": "TikZ/images/083.png", "type": "TikZ"}
{"id": 84, "path": "TikZ/images/084.png", "type": "TikZ"}
{"id": 85, "path": "TikZ/images/085.png", "type": "TikZ"}
{"id": 86, "path": "TikZ/images/086.png", "type": "TikZ"}
{"id": 87, "path": "TikZ/images/087.png", "type": "TikZ"}
{"id": 88, "path": "TikZ/images/088.png", "type": "TikZ"}
{"id": 89, "path": "TikZ/images/089.png", "type": "TikZ"}
{"id": 90, "path": "TikZ/images/090.png", "type": "TikZ"}
{"id": 91, "path": "TikZ/images/091.png", "type": "TikZ"}
{"id": 92, "path": "TikZ/images/092.png", "type": "TikZ"}
{"id": 93, "path": "TikZ/images/093.png", "type": "TikZ"}
{"id": 94, "path": "TikZ/images/094.png", "type": "TikZ"}
{"id": 95, "path": "TikZ/images/095.png", "type": "TikZ"}
{"id": 96, "path": "TikZ/images/096.png", "type": "TikZ"}
{"id": 97, "path": "TikZ/images/097.png", "type": "TikZ"}
{"id": 98, "path": "TikZ/images/098.png", "type": "TikZ"}
{"id": 99, "path": "TikZ/images/099.png", "type": "TikZ"}
{"id": 0, "path": "VP/images/000.png", "ocr_result": "```\nThis is why I have trust issues\n\nIceland\n\nGreenland\n```", "query": "Which place in the picture has more comfortable weather?", "reference_answer": "Iceland", "type": "VP"}
{"id": 1, "path": "VP/images/001.png", "ocr_result": "```markdown\nSprint\nScottrade\n7-ELEVEN\n```", "query": "I want to buy some daily necessities. What should I do?", "reference_answer": "Go to 7-eleven", "type": "VP"}
{"id": 2, "path": "VP/images/002.png", "ocr_result": "```\nBakery Hours\nEaster 2023\n\nGood Friday 8am \u2013 3pm\n\nEaster Saturday 8am \u2013 3pm\n\nEaster Sunday  CLOSED\n\nEaster Monday 8am \u2013 3pm\n```", "query": "Today's Sunday. Will the bakery open?", "reference_answer": "no", "type": "VP"}
{"id": 3, "path": "VP/images/003.png", "ocr_result": "```\nPLAYGROUND\nRULES\nDo Not Use Equipment\nWhen Wet.\nNo Running, Pushing Or\nShoving.\nDo Not Use Play Equipment\nImproperly.\nNo Bare Feet, Wear Proper\nFootwear.\n\nADULT SUPERVISION REQUIRED FOR USE.\nPLAY CAREFULLY!\n```", "query": "Are they following the rules?", "reference_answer": "no", "type": "VP"}
{"id": 4, "path": "VP/images/004.png", "ocr_result": "```markdown\nPORK BELLY            Shelf life\n                      September 1\n\n30\\%                  9.80\n```", "query": "What was the price of this item before the price reduction?", "reference_answer": "14", "type": "VP"}
{"id": 5, "path": "VP/images/005.png", "ocr_result": "```markdown\n$3,002\n$2,239\n$2,153\n$1,278\n$833\nAlphabet\nMicrosoft\n\\t Meta\namazon\n* In the 12 months ending September 30. Figures rounded.\nSources: Company results via Macrotrends.net, Statista calculations\n```", "query": "Which company is the third best?", "reference_answer": "Microsoft", "type": "VP"}
{"id": 6, "path": "VP/images/006.png", "ocr_result": "```markdown\nYIELD\nRAIL\nCROSSING\nROAD\nBUCKLE UP\nIT'S THE LAW\nSTOP\n138\n```", "query": "If I stand here for a while, what will come in front of me?", "reference_answer": "A train", "type": "VP"}
{"id": 7, "path": "VP/images/007.png", "ocr_result": "```\nINCOME JAN FEB MAR APR MAY JUN Total Average\nSalary $5,000 $5,000 $5,000 $5,000 $5,000 $5,000 $30,000 $5,000\nBusiness $4,000 $4,200 $3,800 $3,400 $4,000 $3,600 $23,000 $3,833\nDividends 0 0 0 0 0 0 0 $0\nInterest Income $50 $50 $50 $50 $50 $50 $300 $50\nOthers $0 $0 $20 $0 $30 $0 $50 $8\nTotal $9,050 $9,250 $8,870 $8,450 $9,080 $8,650 $53,350 $8,892\n```", "query": "Which month has the highest gross income?", "reference_answer": "FEB", "type": "VP"}
{"id": 8, "path": "VP/images/008.png", "ocr_result": "```markdown\n61.3\n38.7\n27.5\n31.3\n47.7\n48.1\n57.5\n61\n43.4\n26.1\n54\n67.4\n59\n55.3\n66.1\n65.2\n67.8\n95.6\n106.1\n102.5\n109.1\n125\n2000\n2001\n2002\n2003\n2004\n2005\n2006\n2007\n2008\n2009\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\nSpending in billion u.s. dollars\nAdditional Information\n\u00a9 Statista 2021\nShow source\n```", "query": "What is the projected amount of semiconductor capital spending in 2021?", "reference_answer": "125", "type": "VP"}
{"id": 9, "path": "VP/images/009.png", "ocr_result": "```markdown\nChris Wu\n```", "query": "Who is the artist of the painting?", "reference_answer": "Chris Wu", "type": "VP"}
{"id": 10, "path": "VP/images/010.png", "ocr_result": "None", "query": "Is it safe?", "reference_answer": "No", "type": "VP"}
{"id": 11, "path": "VP/images/011.png", "ocr_result": "```markdown\nAT&T M\n3G 6:00\nBlur Noc\nNOC2: Wed Oct 6 00:55:01 U...\nabout a minute ago.\nText Mess Market Browser\n```", "query": "Which button should I click if I want to search for information?", "reference_answer": "browser", "type": "VP"}
{"id": 12, "path": "VP/images/012.png", "ocr_result": "```\nChoose a ride\n\nUberX Share \n$1$\n$14$\u2013$16.50$\nPickup in $5$ min \u2022 $8:30$\u2013$8:40$ AM\nSave if shared\n\nUberX\n$18.10$\nPickup in $4$ min \u2022 $8:24$ AM\nFaster\n\nUberXL\n$31.44$\nPickup in $8$ min \u2022 $8:28$ AM\n```", "query": "If I have only $17, what would I do?", "reference_answer": "Choose UberX Share", "type": "VP"}
{"id": 13, "path": "VP/images/013.png", "ocr_result": "```\nSome of those who would not likely quarantine say they just don\u2019t think it\u2019s necessary\n\nAmong the 7% of U.S. adults who say they definitely would not or probably would not act on advice to quarantine, \\% who say each statement is ___ why they would be unlikely to quarantine themselves for at least 14 days\n\nA major reason | A minor reason | Not a reason\nJust don't think it's necessary\n44 | 35 | 19\nUnable to miss work\n35 | 17 | 47\nToo many other obligations\n23 | 38 | 39\nConcern about being isolated from others\n15 | 24 | 58\nUnable to arrange child care\n11 | 11 | 77\n\nNote: Based on the half sample of respondents randomly assigned to receive these questions. Those who did not give an answer are not shown.\nSource: Survey of U.S. adults conducted July 13-19, 2020.\n\u201cThe Challenges of Contact Tracing as U.S. Battles COVID-19\u201d\n\nPEW RESEARCH CENTER\n```", "query": "Which category has the same value for \"A major reason\" and \"A minor reason\"?", "reference_answer": "Uable to arrange child care", "type": "VP"}
{"id": 14, "path": "VP/images/014.png", "ocr_result": "```\nPancake recipe\n1\n2\n3\n4\n5\n6\n7\n8\n9\nalamy\nalamy\nalamy\nalamy\nalamy\nalamy\nalamy\nalamy\nalamy\nalamy\nalamy\n```", "query": "How many steps are there to make pancakes?", "reference_answer": "9", "type": "VP"}
{"id": 15, "path": "VP/images/015.png", "ocr_result": "```markdown\nFiles\nFind My\nShortcuts\niTunes Store\nTranslate\nFreeform\nTips\nContacts\nUtilities\nFitness\nWatch\nHeadphones\n```", "query": "I want to check the status of my watch. What should I do?", "reference_answer": "tap Watch icon", "type": "VP"}
{"id": 16, "path": "VP/images/016.png", "ocr_result": "```markdown\nCountry                              Sales Volume                              Revenue                              Profit                              Profit Margin\nUSA                              40.080                              $15.971.880                              $3.086.421                              19,3%\nChina                              35.070                              $15.866.670                              $3.032.162                              19,1%\nAustralia                              27.054                              $14.812.566                              $2.868.636                              19,4%\nIndia                              23.046                              $10.608.174                              $1.853.710                              17,5%\nSouth Korea                              16.032                              $10.494.948                              $1.975.844                              18,8%\n\nTotal / Avg                              141.282                              $67.754.238                              $12.816.772                              18,8%\n```", "query": "What is the average profit margin for all countries, please answer in x.x% format?", "reference_answer": "18.8%", "type": "VP"}
{"id": 17, "path": "VP/images/017.png", "ocr_result": "```markdown\nnadal\nphoto.com\nEmirates\nUS OPEN SERIES\n```", "query": "Is it a hit?", "reference_answer": "Yes", "type": "VP"}
{"id": 18, "path": "VP/images/018.png", "ocr_result": "```\n$130.96\nFord \nF150\n(Regular Cab)\n$82.56\nToyota \nRAV4\n$70.55\nHonda\nCivic\nTotal fueling cost\n```", "query": "Which model has the highest toal fueling cost?", "reference_answer": "Ford F150", "type": "VP"}
{"id": 19, "path": "VP/images/019.png", "ocr_result": "```\ntesto 104\n\n21.8\\degree C\n\ntesto\n```", "query": "What's the temperature?", "reference_answer": "21.8 degrees Celsius", "type": "VP"}
{"id": 20, "path": "VP/images/020.png", "ocr_result": "```\nSTART\nAlarm Rings\nReady to get up?\nHit Snooze Button\nDelay\nClimb Out of Bed\nEND\nSet for 5 minutes\nAverage 3 times\nYES\nNO!\n```", "query": "What do I do when I'm not ready to get up?", "reference_answer": "Hit snooze Button", "type": "VP"}
{"id": 21, "path": "VP/images/021.png", "ocr_result": "```\nRepublicans and Democrats take\nsimilar views of fairness of tax system\n\n\\% who say the federal tax system is very or moderately\nfair ...\n\nRep/Lean Rep\n\nDem/Lean Dem\n\n50\n41\n\n41\n40\n\n56\n43\n\n57\n43\n\n49\n43\n\n40\n43\n\n56\n45\n\n45\n41\n\n1997\n2002\n2007\n2012\n2017\n\nNotes: 1997 and 2010 data from CNN; 2003 data from NPR. Q45.\nSource: Survey conducted Oct. 25-30, 2017.\n\nPEW RESEARCH CENTER\n```", "query": "What color represents Democrats?", "reference_answer": "blue", "type": "VP"}
{"id": 22, "path": "VP/images/022.png", "ocr_result": "None", "query": "Who takes this photo?", "reference_answer": "The man who drives the car.", "type": "VP"}
{"id": 23, "path": "VP/images/023.png", "ocr_result": "```markdown\n32\n31\n33\n34\n```", "query": "Which parking space is the red car?", "reference_answer": "31", "type": "VP"}
{"id": 24, "path": "VP/images/024.png", "ocr_result": "```\nRENNE\n```", "query": "Will the aircraft hit the moon?", "reference_answer": "No", "type": "VP"}
{"id": 25, "path": "VP/images/025.png", "ocr_result": "```\n| Last Name   | Sales       | Country  | Quarter |\n|-------------|-------------|----------|---------|\n| Smith       | $16,753.00  | UK       | Qtr 3   |\n| Johnson     | $14,808.00  | USA      | Qtr 4   |\n| Williams    | $10,644.00  | UK       | Qtr 2   |\n| Jones       | $1,390.00   | USA      | Qtr 3   |\n| Brown       | $4,865.00   | USA      | Qtr 2   |\n| Williams    | $12,438.00  | UK       | Qtr 1   |\n| Johnson     | $9,339.00   | USA      | Qtr 4   |\n| Smith       | $18,919.00  | USA      | Qtr 4   |\n| Jones       | $9,213.00   | USA      | Qtr 4   |\n| Jones       | $7,433.00   | UK       | Qtr 1   |\n| Brown       | $3,255.00   | USA      | Qtr 1   |\n| Williams    | $14,867.00  | UK       | Qtr 4   |\n| Williams    | $19,302.00  | UK       | Qtr 4   |\n| Smith       | $9,698.00   | USA      | Qtr 1   |\n```", "query": "Who is the best saler in Quarter 4?", "reference_answer": "Williams", "type": "VP"}
{"id": 26, "path": "VP/images/026.png", "ocr_result": "```\nDepartment\tBusiness Unit\tGender\tEthnicity\tAge\nIT\tResearch & Development\tFemale\tBlack\t55\nIT\tManufacturing\tMale\tAsian\t59\nFinance\tSpeciality Products\tFemale\tCaucasian\t50\nIT\tManufacturing\tFemale\tCaucasian\t20\nFinance\tManufacturing\tMale\tAsian\t55\nSales\tCorporate\tMale\tAsian\t57\nIT\tCorporate\tFemale\tCaucasian\t27\nFinance\tManufacturing\tMale\tBlack\t25\nAccounting\tManufacturing\tMale\tCaucasian\t29\nFinance\tSpeciality Products\tFemale\tCaucasian\t34\nHuman Resources\tManufacturing\tFemale\tAsian\t36\nEngineering\tSpeciality Products\tFemale\tCaucasian\t27\nHuman Resources\tManufacturing\tMale\tCaucasian\t59\nFinance\tResearch & Development\tFemale\tAsian\t51\nAccounting\tSpeciality Products\tMale\tAsian\t31\nMarketing\tResearch & Development\tFemale\tAsian\t41\nFinance\tResearch & Development\tFemale\tBlack\t65\nMarketing\tSpeciality Products\tFemale\tLatino\t64\nIT\tCorporate\tMale\tCaucasian\t64\nSales\tResearch & Development\tMale\tAsian\t45\nIT\tManufacturing\tMale\tLatino\t56\nSales\tManufacturing\tFemale\tLatino\t36\nIT\tResearch & Development\tMale\tLatino\t59\nSales\tSpeciality Products\tMale\tCaucasian\t37\nSales\tSpeciality Products\tMale\tAsian\t44\nHuman Resources\tSpeciality Products\tMale\tBlack\t56\nEngineering\tCorporate\tFemale\tLatino\t56\nEngineering\tSpeciality Products\tMale\tAsian\t43\nEngineering\tSpeciality Products\tMale\tAsian\t64\nIT\tCorporate\tMale\tAsian\t64\n```", "query": "What is the average age of people from the IT department?", "reference_answer": "51.125", "type": "VP"}
{"id": 27, "path": "VP/images/027.png", "ocr_result": "```\n| Name    | Math | Physics | Chemistry |\n|---------|------|---------|-----------|\n| Ron     | 40   | 66      | 40        |\n| Jenny   | 89   | 50      | 46        |\n| Andre   | 61   | 72      | 32        |\n| Ruth    | 74   | 42      | 79        |\n| John    | 36   | 67      | 59        |\n| Cecelia | 51   | 56      | 93        |\n| Joshua  | 53   | 82      | 33        |\n| Pauline | 74   | 98      | 87        |\n| Linda   | 95   | 39      | 73        |\n```", "query": "Who has the highest overall score?", "reference_answer": "Pauline", "type": "VP"}
{"id": 28, "path": "VP/images/028.png", "ocr_result": "```\nNutrition Facts\nAbout 11 servings per container\nServing size          3/4 cup (78g)\n\nAmount per serving\nCalories                       25\n                                       % Daily Value*\nTotal Fat 0g                                0%\n   Saturated Fat 0g                        0%\n   Trans Fat 0g\nCholesterol 0mg                           0%\nSodium 10mg                             0%\nTotal Carbohydrate 4g                1%\n   Dietary Fiber 1g                        4%\n   Total Sugars 1g\n     Includes 0g Added Sugars      0%\nProtein 1g\n\nVitamin D 0mcg                           0%\nCalcium 20mg                             2%\nIron 0.4mg                                 2%\nPotassium 120mg                       2%\n*The % Daily Value tells you how much a nutrient in a serving of food contributes to a daily diet. 2,000 calories a day is used for general nutrition advice.\n\nINGREDIENTS: ZUCCHINI, CARROTS, CAULIFLOWER, ITALIAN GREEN BEANS, LIMA BEANS, RED BELL PEPPER.\n\nDISTRIBUTED BY:\nALL SHIRLEY'S COMPANY\nP.O. BOX 93053\nLOS ANGELES, CA 90093\n1600.512.737\nwww.shirleysfoods.com\n\nP4-18875-001\n\nCOOKING INSTRUCTIONS\nKEEP FROZEN UNTIL READY TO USE\n\nFOR FOOD SAFETY AND QUALITY: \nCOOK THOROUGHLY TO A TEMPERATURE OF 165\u00b0F. \nTO STEAM COOK: PREPARE VEGETABLES AS STATED BELOW. THEN COOL IN A RAPIDLY COLD AND REFRIGERATED WATER-FILLED CULINARY FEATURE.\n\nSTOVE TOP\n1. Bring 5 quarts of water to a boil on HIGH. \n2. Add one bag of frozen vegetables and cook for 7 minutes, stirring as needed.\n3. Drain.\n\nSTEAMER\n1. Arrange one bag of frozen vegetables in a so-called full-size steam table pan.\n2. Steam for 5 minutes.\n\nMICROWAVE (1100 WATTS)\n1. Place one bag of frozen vegetables in a microwaveable dish.\n2. Add 2 tbsps of water and cover.\n3. Cook on HIGH for 15 minutes, stirring halfway through cook time.\n\n329 NOV2938LQ\nPRODUCT OF U.S OR MEXICO\n```", "query": "How many heating methods are shown on the food packaging in the picture?", "reference_answer": "3", "type": "VP"}
{"id": 29, "path": "VP/images/029.png", "ocr_result": "None", "query": "How many real people are in this scene?", "reference_answer": "1", "type": "VP"}
{"id": 30, "path": "VP/images/030.png", "ocr_result": "```\nModels  #Trainable Params  Open-sourced?  Visual Question Answering  Image Captioning  Image-Text Retrieval\n        VQAv2 (test-dev)  VQA acc.  NoCaps (val)  Flickr (test)\n                                      CIDEr  SPICE  TR@1  IR@1\n\nBLIP (Li et al., 2022)  583M  \u2713  -  -  113.2  14.8  96.7  86.7\nSimVLM (Wang et al., 2021b)  1.4B  \u2717  -  -  112.2  -  -  -\nBEIT-3 (Wang et al., 2022b)  1.9B  \u2717  -  -  -  -  94.9  81.5\nFlamingo (Alayrac et al., 2022)  10.2B  \u2717  56.3  -  -  -  -  -\nBLIP-2  188M  \u2713  65.0  -  121.6  15.8  97.6  89.7\n``", "query": "Which algorithms are open-sourced?", "reference_answer": "BLIP and BLIP-2", "type": "VP"}
{"id": 31, "path": "VP/images/031.png", "ocr_result": "```\nUnits Of electricity by fuel source in Australia\n\n50\n20\n10\n20\n1980\nTotal Production:\n100 units\n\n130\n36\n2\n2\n2000\nTotal Production:\n170 units\n\nUnits of electricity by fuel source in France\n\n25\n20\n5\n15\n25\n1980\nTotal Production:\n90 units\n\n2\n2\n25\n126\n25\n2000\nTotal Production:\n180units\nNatural Gas\nOil\nCoal\nNuclear Power\nHydro Power\nNatural Gas\nOil\nCoal\nNuclear Power\nHydro Power\n```", "query": "What was the highest unit of electricity by fuel source in France in 2000?", "reference_answer": "nuclear power", "type": "VP"}
{"id": 32, "path": "VP/images/032.png", "ocr_result": "```\nBlue whale\nKiller whale\nLeopard seal\nElephant seal\nPenguin\nSquid\nCrab\nSeaweed\nPhytoplankton\nZooplankton\nKrill\nFish\nSeagull\n```", "query": "What is crab's food in the picture?", "reference_answer": "seaweed", "type": "VP"}
{"id": 33, "path": "VP/images/033.png", "ocr_result": "```markdown\nHOW TO COOK OMELETTE\n\nBEAT EGGS WITH SALT\n\nHEAT BUTTER IN FRYING PAN\n\nPOUR EGGS INTO PAN\n\nTILT PAN SLIGHTLY\n\nCUT HERBS, SAUSAGE AND MUSHROOMS\n\nFILL OMELETTE WITH INGREDIENTS\n\nFOLD IN HALF USING SPATULA\n\nENJOY!\n```", "query": "How many steps does it take to make an omelet?", "reference_answer": "7", "type": "VP"}
{"id": 34, "path": "VP/images/034.png", "ocr_result": "```markdown\nDate | Year | Item name | Quantity | Unit price | Customer name\n1/1/2014 | 2014 | Cookies | 39500 | $0.50 | Rapture, Inc.\n1/1/2014 | 2014 | Gummy worms | 15250 | $0.50 | Miel\n1/1/2014 | 2014 | Freeze pops | 2100 | $0.25 | Sweet Tooth's\n1/1/2014 | 2014 | Taffy | 11300 | $0.50 | Lickety Split\n1/1/2014 | 2014 | Mints | 9400 | $0.50 | SF Candy Shack\n1/1/2014 | 2014 | Cookies | 39500 | $0.50 | Rapture, Inc.\n1/1/2014 | 2014 | Rock candy | 8450 | $0.50 | Heavenly, LLC\n1/1/2014 | 2014 | Mints | 4950 | $0.50 | Candy Cannon\n```", "query": "What's the total income by selling Taffy?", "reference_answer": "$5650", "type": "VP"}
{"id": 35, "path": "VP/images/035.png", "ocr_result": "```\nOusmane Demb\u00e9l\u00e9 (17/18 - FC Barcelona) 130\nKai Havertz (20/21 - FC Chelsea) 80\nLucas Hern\u00e1ndez (19/20 - FC Bayern M\u00fcnchen) 80\nKevin De Bruyne (15/16 - Manchester City) 76\nChristian Pulisic (18/19 - Chelsea FC) 64\nPierre-Emerick Aubameyang (17/18 - FC Arsenal) 63.75\nLuka Jovic (19/20 - Real Madrid) 60\nNaby Ke\u00efta (18/19 - Liverpool FC) 60\nTimo Werner (20/21 - FC Chelsea) 53\nLeroy San\u00e9 (16/17 - Manchester City) 52\nS\u00e9bastien Haller (19/20 - West Ham United) 50\nLeroy San\u00e9 (20/21 - FC Bayern M\u00fcnchen) 45\nGranit Xhaka (16/17 - Arsenal FC) 45\nJoelinton (19/20 - Newcastle United) 44\nJulian Draxler (15/16 - VfL Wolfsburg) 43\nHenrikh Mkhitaryan (16/17 - Manchester United) 42\nCorentin Tolisso (17/18 - FC Bayern M\u00fcnchen) 41.5\nRoberto Firmino (15/16 - Liverpool FC) 41\nDouglas Costa (18/19 - Juventus Turin) 40\nJavi Martinez (12/13 - FC Bayern M\u00fcnchen) 40\nArturo Vidal (15/16 - FC Bayern M\u00fcnchen) 39.25\nThilo Kehrer (18/19 - Paris St. Germain) 37\nMario G\u00f6tze (13/14 - FC Bayern M\u00fcnchen) 37\nEdin Dzeko (10/11 - Manchester City) 37\nJulian Draxler (16/17 - Paris Saint Germain) 36\nTransfer fee paid in million euros\nCollapse statistic\nAdditional Information\n\u00a9 Statista 2021\nShow source\n```", "query": "How much did FC Bayern Munchen pay as a transfer fee for Javi Martinez?", "reference_answer": "40", "type": "VP"}
{"id": 36, "path": "VP/images/036.png", "ocr_result": "```markdown\nStrategies to Build Working Memory\nwww.thepathway2success.com          Clipart by Kate Hadfield\nMake Lists\nTO DO LIST\nMake Meaningful Connections\nChunk Information\nTODAY    TOMORROW\nUse Mnemonics and Acronyms\nUse Games and Puzzles\nPractice Mental Math\nExercise Before & During Learning\nVisualize\nMake a Song\n```", "query": "How many strategies does this picture show for building working memory?", "reference_answer": "9", "type": "VP"}
{"id": 37, "path": "VP/images/037.png", "ocr_result": "```markdown\nFar more Americans favor keeping\nspending on policing at current levels \u2013\nor increasing it \u2013 than cutting spending\n\n% who say spending on policing in your area should be ...\n\nIncreased\n31\nA lot\n11\nA little\n20\nA lot\n12\nDecreased\n25\nA little\n14\n42\nStay about\nthe same\n\nNote: No answer responses not shown.\nSource: Survey of U.S. adults conducted June 16-22, 2020.\n\nPEW RESEARCH CENTER\n```", "query": "Is the value of \"A lot\" more than \"A little\"?", "reference_answer": "No", "type": "VP"}
{"id": 38, "path": "VP/images/038.png", "ocr_result": "```\nNot in Service\n\nL353c\nHedingham\nL355\nEU07 GVY\nHedingham\n```", "query": "Will there be passengers on the bus?", "reference_answer": "No", "type": "VP"}
{"id": 39, "path": "VP/images/039.png", "ocr_result": "```\nCOVR Question Types\nCompare.\tMult. Ref\tQuant. Attr\tSpec Attr\tChoose\n457\t282\t12\t357\t1\nGQA Question Types\nVerify\tQuery\tLogical\tCompare\tChoose\n68\t167\t34\t15\t25\n```", "query": "How many GQA Question Types are there in total?", "reference_answer": "309", "type": "VP"}
{"id": 40, "path": "VP/images/040.png", "ocr_result": "```\n!SECUREGUAR$^\\text{TM}$\nTIRE REPAIR KIT\n\nEASY 8 STEP\nGUIDE ON\nHOW TO\nUSE YOUR\nREPAIR KIT\n\nRemove\nforeign\nobject.\n1\n\nLube the\ntip of the\nprobe.\n2\n\nInsert the lubed probe at\nthe angle of the puncture\nto clean edges.\n3\n\nUse probe to spread\ntire puncture for easy repair.\n4\n\nRemove the repair\nfrom the plastic.\n5\n\nCenter the repair\nin the needle,\ndo not use glue.\n6\n\nInsert the repair\nat the angle of\npuncture\n7\n\nPull probe straight out.\nDo not twist.\nCut off excess.\n8\n```", "query": "What steps do I need to use a knife for?", "reference_answer": "8", "type": "VP"}
{"id": 41, "path": "VP/images/041.png", "ocr_result": "```markdown\n1. Figure 1 shows the structure of the earth\u2019s interior. Write the number showing each layer in the table below.\n\n4 3 2 1\n\nFigure 1\n\nLayer | Number on figure 1\nOuter core |\nMantle |\nCrust |\nInner core |\n\n(4)\n```", "query": "The inner core is the layer in the figure?", "reference_answer": "4", "type": "VP"}
{"id": 42, "path": "VP/images/042.png", "ocr_result": "```markdown\n3 \\times 3 = \n7 \\times 2 = \n11 - 2 = \n```", "query": "What is the answer of the child on the right in the picture?", "reference_answer": "9", "type": "VP"}
{"id": 43, "path": "VP/images/043.png", "ocr_result": "```markdown\nUS Nationwide:\n- :large_blue_circle: Median House Price\n- :large_orange_circle: Median Gross Rent per Month\n- :red_circle: Median Household Income\n\nGrowth rate:\n150%\n100%\n50%\n0\n\n1960\n1970\n1980\n1990\n2000\n2008\n2010\n2017\n```", "query": "Which year had the greatest median house price growth rate?", "reference_answer": "2008", "type": "VP"}
{"id": 44, "path": "VP/images/044.png", "ocr_result": "```\nMethod                     Dyck Language     Games of 24\nGPT3.5 non-recursive       0.0               76.43\nGPT3.5 recursive           1.4               **98.83**\nGPT4 non-recursive         1.4               96.04\nGPT4 recursive             **4.5**           **98.83**\n```", "query": "Is GPT3.5 non-recursive the best algorithm in Games of 24?", "reference_answer": "no", "type": "VP"}
{"id": 45, "path": "VP/images/045.png", "ocr_result": "```\nTable 3. Results on downstream V+L tasks, including visual reasoning (VQA and NLVR2), visual grounding (RefCOCO+), and image caption generation (COCO Caption). RefCOCO+ scores with $*$ are evaluated in the weakly-supervised setting. COCO Captioning scores with $+$ are models optimized with CIDEr for the second stage of fine-tuning.\n\n| Method                   | VQA                  | NLVR2                                          | RefCOCO+                          | COCO Caption       |\n|--------------------------|----------------------|------------------------------------------------|-----------------------------------|--------------------|\n|                          | test-dev  | test-std  | dev     | test-P   | vald    | testAd  | testBd | BLEU@4   | CIDEr                 |\n| ViLBERT                  | 70.55    | 70.92    | -       | -       | 72.34   | 78.52   | 62.61  | -        | -                    |\n| VL-BERT                  | 71.16    | -        | -       | -       | 72.59   | 78.57   | 62.30  | -        | -                    |\n| VILLA                    | 73.59    | 73.67    | 78.39   | 79.30   | 76.05   | 81.65   | 65.70  | -        | -                    |\n| SOHO                     | 73.25    | 73.47    | 76.37   | 77.32   | -       | -       | -      | 36.2     | 117.3                |\n| E2E-VLP                  | 73.25    | 73.67    | 77.25   | 77.96   | -       | -       | -      | -        | -                    |\n| KD-VLP                   | 74.20    | 74.31    | 77.36   | 77.78   | -       | -       | -      | -        | -                    |\n| UNITER$_{large}$         | 73.82    | 74.02    | 79.12   | 79.98   | 75.90   | 81.45   | 66.70  | -        | -                    |\n| ALBEF(4M)                | 74.54    | 74.70    | 80.24   | 80.50   | -       | -       | -      | -        | -                    |\n| ALBEF(14M)               | 75.84    | 76.04    | 82.55   | 83.14   | 58.46$*$| 65.89$*$| 46.25$*$| -        | -                    |\n| METER-Swin               | 76.43    | 76.42    | 82.23   | 82.47   | -       | -       | -      | -        | -                    |\n| VinVL$_{large}$(5.6M)    | 76.52    | 76.60    | 82.67   | 83.98   | -       | -       | -      | -        | -                    |\n| METER-CLIP               | 77.68    | 77.64    | 82.33   | 83.05   | -       | -       | -      | 41.0$+$ | 140.9$+$             |\n| SimVLM$_{base}$(1.8B)    | 77.87    | 78.14    | 81.72   | 81.77   | -       | -       | -      | 39.0     | 134.8                |\n| X-VLM(4M)                | 78.07    | 78.09    | 84.16   | 84.21   | 80.17   | 86.36   | 71.00  | 39.8     | 133.1 / 140.8$+$     |\n| X-VLM(16M)               | **78.22** | **78.37** | **84.41** | **84.76**  | **80.17**   | **86.36**   | **71.00**  | **39.9** / **41.3$+$** | **134.0 / 140.3$+$** |\n\n134.0 / 140.3$+$\n```", "query": "Which algorithm is the best for VQA text-dev?", "reference_answer": "X-VLM(16M)", "type": "VP"}
{"id": 46, "path": "VP/images/046.png", "ocr_result": "```markdown\nNICOLET AV 3225\n\nSTOP\n\nShades of Red\n\nJohnson Eads\nMay 11, 2008\n```", "query": "What should I do if I am on a car?", "reference_answer": "Stop the car", "type": "VP"}
{"id": 47, "path": "VP/images/047.png", "ocr_result": "None", "query": "Will there be an accident?", "reference_answer": "no", "type": "VP"}
{"id": 48, "path": "VP/images/048.png", "ocr_result": "```markdown\nJapan: Gross domestic product (GDP) in current prices from 1980 to 2022, with projections until 2028 (in billion U.S. dollars)\nGDP in billion U.S. dollars\n1980\n1982\n1984\n1986\n1988\n1990\n1992\n1994\n1996\n1998\n2000\n2002\n2004\n2006\n2008\n2010\n2012\n2014\n2016\n2018\n2020\n2022\n2024*\n2026*\n2028*\n\n1,127.88\n1,345.2\n2,121.25\n2,584.34\n3,134.18\n3,657.35\n3,988.33\n4,544.77\n4,998.8\n4,492.45\n4,098.36\n4,893.14\n5,106.68\n5,545.57\n6,233.15\n5,759.07\n5,212.33\n4,601.66\n4,444.93\n4,897\n4,930.84\n5,005.54\n4,233.54\n4,526.48\n4,923.43\n5,344.03\n\nSource\nIMF\n\u00a9 Statista 2023\nAdditional Information:\nJapan; IMF; 1980 to 2022\n```", "query": "How many peaks are there in the graph?", "reference_answer": "8", "type": "VP"}
{"id": 49, "path": "VP/images/049.png", "ocr_result": "```markdown\nOXFAM\nCAFE\n```", "query": "Is it raining?", "reference_answer": "No", "type": "VP"}
{"id": 50, "path": "VP/images/050.png", "ocr_result": "```markdown\n$1$\n$2$\n$3$\n$4$\n$5$\n$6$\n$7$\n$8$\n$9$\n$10$\n$11$\n$12$\nKosher by design\n```", "query": "Is it too late to start making dinner?", "reference_answer": "yes", "type": "VP"}
{"id": 51, "path": "VP/images/051.png", "ocr_result": "```\n\\begin{tabular}{lcccccc}\n\\toprule\n\\textbf{Method} & \\textbf{VSR} & & & \\textbf{NextQA} & \\textbf{GQA} & \\textbf{COVR}\\\\\n& \\textbf{Random Split} & \\textbf{Zero-shot Split} & & \\textbf{Hard Split-T} & \\textbf{Test-dev} & \\textbf{Test}\\\\\n\\midrule\nFully supervised$\\dagger$ & 69.3 & 63.0 & & 48.6 & 65.1 & 57.9\\\\\n\\midrule\n\\textit{Zero/few-shot methods}\\\\\nCLIP & 56.0 & 54.5 & & -- & 42.31 & --\\\\\nBLIPv2 & -- & -- & & -- & \\textbf{49.0} & 50.7\\\\\nCodeVQA & -- & -- & & -- & -- & --\\\\\nViperGPT$\\ddagger$ & 61.25 & 61.59 & & 47.21 & 44.63 & 51.69\\\\\nRVP (ours) & 63.53 & \\textbf{66.09} & & \\textbf{48.82} & 45.62 & \\textbf{52.67}\\\\\n\\bottomrule\n\\end{tabular}\n\\dagger Pretrained on QA-VSR and CC datasets\\\\\n\\ddagger Use official code and setting from \\\\\n```", "query": "Is our algorithm always the best?", "reference_answer": "no", "type": "VP"}
{"id": 52, "path": "VP/images/052.png", "ocr_result": "None", "query": "What's the holiday?", "reference_answer": "Chrismas", "type": "VP"}
{"id": 53, "path": "VP/images/053.png", "ocr_result": "```\nShare of retail trade\n\nUnited Kingdom Germany France Netherlands Spain Italy Europe average\n\n2014 2015 2016** 2017 2018 2019 2020*** 2021***\n\n\u00a9 Statista 2021\n\nAdditional Information\n\nShow source\n```", "query": "What was the year with the highest share of UK retail trade?", "reference_answer": "2020", "type": "VP"}
{"id": 54, "path": "VP/images/054.png", "ocr_result": "```markdown\n$11\\%$\n$18\\%$\n$19\\%$\n$25\\%$\n$27\\%$\n$7\\%$\n$12\\%$\n$22\\%$\n$29\\%$\n$30\\%$\n$10\\%$\n$7\\%$\n$21\\%$\n$22\\%$\n$40\\%$\n$12\\%$\n$1\\%$\n$6\\%$\n$26\\%$\n$25\\%$\n$15\\%$\n$5\\%$\n$8\\%$\n$26\\%$\n$29\\%$\n$16\\%$\nSoft drinks\nMilk products\nCereals, cakes and biscuits\nSugar, sweets and jams\nAlcohol\nOther\nProportion of daily added sugar\nChildren 1.5\u20133 years\nChildren 4\u201310 years\nTeenagers 11\u201318 years\nAdults 19\u201364 years\nAdults 65 years and over\n\u00a9 Statista 2021\nShow source\nAdditional Information\n```", "query": "What age group has the highest percentage of Soft drinks?", "reference_answer": "Teenagers 11-18 years", "type": "VP"}
{"id": 55, "path": "VP/images/055.png", "ocr_result": "```\nSpartan\nSki\nClub\n```", "query": "How many people are taking a group photo?", "reference_answer": "14", "type": "VP"}
{"id": 56, "path": "VP/images/056.png", "ocr_result": "None", "query": "What will be produced?", "reference_answer": "Wooden Pickaxe", "type": "VP"}
{"id": 57, "path": "VP/images/057.png", "ocr_result": "```\nSalads Hot Dogs Fruit Burgers Popcorn Sandwiches\nBALVERT.com\nCOLD BEER\nHOT DOG\nALL DOGS \u20ac5\n```", "query": "What can I do here?", "reference_answer": "Buy various food", "type": "VP"}
{"id": 58, "path": "VP/images/058.png", "ocr_result": "None", "query": "How many circles should I walk through if I want go downstairs?", "reference_answer": "2", "type": "VP"}
{"id": 59, "path": "VP/images/059.png", "ocr_result": "```\nModels                                #Trainable           #Total         VQAv2          OK-VQA       GQA\n                                         Params             Params          val            test-dev      test         test-dev\nVL-T5$_{no-vqa}$                            224M             269M            13.5              -            5.8           6.3   \nFewVLM (Jin et al., 2022)                   740M             785M            47.7              -           16.5          29.3   \nFrozen (Tsimpoukelli et al., 2021)           40M             7.1B            29.6              -            5.9            -   \nVLKD (Dai et al., 2022)                     406M             832M            42.6            44.5           13.3            -   \nFlamingo3B (Alayrac et al., 2022)          1.4B             3.2B             -              49.2           41.2            -   \nFlamingo9B (Alayrac et al., 2022)          1.8B             9.3B             -              51.8           44.7            -   \nFlamingo80B (Alayrac et al., 2022)         10.2B             80B             -              56.3          $\\mathbf{50.6}$   -   \n\nBLIP-2 ViT-L OPT$_{2.7B}$                  104M             3.1B            50.1            49.7           30.2          33.9   \nBLIP-2 ViT-g OPT$_{2.7B}$                  107M             3.8B            53.5            52.3           31.7          34.6   \nBLIP-2 ViT-g OPT$_{6.7B}$                  108M             7.8B            54.3            52.6            36.4          36.4   \nBLIP-2 ViT-L FlanT5$_{XL}$                 103M             3.4B            62.6            62.3           39.4          44.4   \nBLIP-2 ViT-g FlanT5$_{XL}$                 107M             4.1B            63.1            63.0           40.7          44.2   \nBLIP-2 ViT-g FlanT5$_{XXL}$                108M            12.1B          $\\mathbf{65.2}$  $\\mathbf{65.0}$ $\\mathbf{45.9}$ $\\mathbf{44.7}$  \n```", "query": "Which algorithm has the highest trainable parameters?", "reference_answer": "Flamingo80B", "type": "VP"}
{"id": 60, "path": "VP/images/060.png", "ocr_result": "```markdown\nCAN YOU FIND THE MISSING NUMBERS?\n\nIF\n2 \\times 1 \\times 3 = 5\n4 \\times 5 \\times 2 = 14\n3 \\times 3 \\times 4 = 15\n5 \\times 3 \\times 2 = 11\nTHEN\n6 \\times 7 \\times 1 = ?\n\n\u00a9www.FunWithPuzzles.com www.FunWithPuzzles.com\n```", "query": "What is the answer in the picture?", "reference_answer": "13", "type": "VP"}
{"id": 61, "path": "VP/images/061.png", "ocr_result": "None", "query": "Is it a mess? Why?", "reference_answer": "Yes", "type": "VP"}
{"id": 62, "path": "VP/images/062.png", "ocr_result": "```\nTITLE CITED BY YEAR\nHotFlip: White-Box Adversarial Examples for Text Classification 964 2018\nJ Ebrahimi, A Rao, D Lowd, D Dou\nACL Proceedings of Annual Meeting of the Association for Computational \u2026\nAdding Conditional Control to Text-to-Image Diffusion Models 654 2023\nL Zhang, A Rao, M Agrawala\nICCV Proceedings of the IEEE/CVF International Conference on Computer Vision\nMovieNet: A Holistic Dataset for Movie Understanding 157 2020\nQ Huang, Y Xiong, A Rao, J Wang, D Lin\nECCV European Conference on Computer Vision\nA Local-to-Global Approach to Multi-modal Movie Scene Segmentation 118 2020\nA Rao, L Xu, Y Xiong, G Xu, Q Huang, B Zhou, D Lin\nCVPR Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern \u2026\nBungeeNeRF: Progressive Neural Radiance Field for Extreme Multi-scale Scene Rendering 77 2022\nY Xiangli, L Xu, X Pan, N Zhao, A Rao, C Theobalt, B Dai, D Lin\nECCV The European Conference on Computer Vision\nA Unified Framework for Shot Type Classification Based on Subject Centric Lens 61 2020\nA Rao, J Wang, L Xu, X Jiang, Q Huang, B Zhou, D Lin\nECCV European Conference on Computer Vision\nAnimateDiff: Animate Your Personalized Text-to-Image Diffusion Models without Specific Tuning 44 2023\nY Guo, C Yang, A Rao, Y Wang, Y Qiao, D Lin, B Dai\narXiv preprint arXiv:2307.04725\n```", "query": "Which one is the most cited?", "reference_answer": "HotFlip: White-Box Adversarial Examples for Text Classification", "type": "VP"}
{"id": 63, "path": "VP/images/063.png", "ocr_result": "```\nAns = 0\ntan(56)\nRad\nDeg\nx!\n(\n)\n%\nCE\nInv\nsin\nln\n7\n8\n9\n\u00f7\n\\pi\ncos\nlog\n4\n5\n6\n\u00d7\ne\ntan\n\\sqrt{}\n1\n2\n3\n-\nAns\nEXP\nx^y\n0\n.\n=\n+\n```", "query": "What's the result? Rounded to three decimal places.", "reference_answer": "1.483", "type": "VP"}
{"id": 64, "path": "VP/images/064.png", "ocr_result": "None", "query": "How many people will be here to have dinner?", "reference_answer": "6", "type": "VP"}
{"id": 65, "path": "VP/images/065.png", "ocr_result": "```markdown\nHSBC Holdings (UK)\n150.17\n165.97\n151.03\n117.06\nLloyds Banking Group (UK)\n45.36\n51.81\n55.98\n62.11\nRoyal Bank of Scotland Group (UK)\n30.08\n38.09\n35.3\n37.74\nBarclays (UK)\n29.47\n39.07\n44.13\n37.2\nStandard Chartered (UK)\n26.03\n28.4\n27.85\n21.96\nMarket capitalization in billion euros\n2016\n2017\n2018\n2019\nAdditional Information\n\u00a9 Statista 2021\nShow source\n```", "query": "What is the average annual Market Capitalization for HSBC Holdings?", "reference_answer": "146.0575 billion euros", "type": "VP"}
{"id": 66, "path": "VP/images/066.png", "ocr_result": "```\nDemocrats still have more favorable views toward NATO than Republicans do\n% of Americans who have a \\textit{favorable} opinion of NATO, by party affiliation\n100%\nDem/Lean Dem\nRep/Lean Rep\n0\n2009\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n60\n49\n60\n49\n57\n53\n58\n50\n58\n43\n56\n44\n57\n51\n74\n48\n76\n52\n61\n45\n65\n46\n70\n46\nSource: Summer 2020 Global Attitudes Survey. Q8g, 2018 results from K\u00f6rber-Stiftung survey conducted September 2018.\nPEW RESEARCH CENTER\n```", "query": "What does the blue line represent?", "reference_answer": "Dem/Lean Dem", "type": "VP"}
{"id": 67, "path": "VP/images/067.png", "ocr_result": "None", "query": "Can I pause my reading here?", "reference_answer": "yes", "type": "VP"}
{"id": 68, "path": "VP/images/068.png", "ocr_result": "```\n| Account                          | Busineess U            | Year | Scenar              | Jan            | Feb            | Mar            | Apr            | May            | Jun            | Jul            |\n| --------                         | -------------          | ------| ---------------     | ------         | ------         | ------         | ------         | ------         | ------         | ------         |\n| 215 Consulting Expense           | Hardware               | 2019  | Actuals             | ($2,111,557)   | ($1,412,954)   | ($1,291,124)   | ($1,397,498)   | ($1,565,368)   | ($1,326,379)   | ($1,622,439)   |\n| 216 Software/Hardware Expense    | Hardware               | 2019  | Actuals             | ($2,621,552)   | ($2,216,152)   | ($2,005,552)   | ($2,208,062)   | ($2,194,136)   | ($1,668,852)   | ($2,568,108)   |\n| 217 Marketing Expense            | Hardware               | 2019  | Actuals             | ($803,681)     | ($503,961)     | ($633,831)     | ($642,450)     | ($677,962)     | ($593,836)     | ($885,482)     |\n| 218 Sales                        | Software               | 2020  | Actuals             | $71,093,649    | $69,761,443    | $67,749,499    | $83,659,411    | $50,706,828    | $74,230,386    | $51,880,322    |\n| 219 Cost of Goods Sold           | Software               | 2020  | Actuals             | ($34,103,526)  | ($30,206,863)  | ($27,470,575)  | ($34,682,066)  | ($21,826,243)  | ($32,436,605)  | ($23,222,326)  |\n| 220 Commissions Expense          | Software               | 2020  | Actuals             | ($3,016,900)   | ($2,879,226)   | ($2,741,416)   | ($3,706,047)   | ($5,172,178)   | ($3,904,360)   | ($6,294,449)   |\n| 221 Payroll Expense              | Software               | 2020  | Actuals             | $8,603,051     | $8,541,760     | $7,322,344     | $9,801,852     | $5,175,460     | $9,241,029     | $8,266,209     |\n| 222 Travel & Entertainment Expense| Software              | 2020  | Actuals             | ($796,316)     | ($740,890)     | ($771,325)     | ($1,023,766)   | ($537,167)     | ($1,164,893)   | ($627,016)     |\n| 223 R&D Expense                  | Software               | 2020  | Actuals             | ($3,002,990)   | ($3,340,409)   | ($3,004,524)   | ($3,551,194)   | ($2,323,361)   | ($3,371,500)   | ($2,592,146)   |\n| 224 Consulting Expense           | Software               | 2020  | Actuals             | ($4,083,940)   | ($4,181,857)   | ($4,500,334)   | ($4,808,754)   | ($4,180,160)   | ($4,363,669)   | ($5,457,365)   |\n| 225 Software/Hardware Expense    | Software               | 2020  | Actuals             | ($5,003,748)   | ($5,653,221)   | ($5,700,743)   | ($5,844,376)   | ($4,156,276)   | ($4,435,423)   | ($4,365,678)   |\n| 226 Marketing Expense            | Software               | 2020  | Actuals             | ($1,468,157)   | ($1,469,241)   | ($1,405,114)   | ($1,822,125)   | ($1,017,225)   | ($1,738,189)   | ($1,610,141)   |\n| 227 Sales                        | Advertising            | 2020  | Actuals             | $19,906,222    | $18,137,975    | $19,647,355    | $25,097,823    | $10,648,319    | $21,526,812    | $14,579,455    |\n| 228 Cost of Goods Sold           | Advertising            | 2020  | Actuals             | ($9,892,107)   | ($9,394,094)   | ($9,903,809)   | ($11,464,349)  | ($6,745,879)   | ($10,643,206)  | ($6,139,938)   |\n| 229 Commissions Expense          | Advertising            | 2020  | Actuals             | ($804,051)     | ($776,771)     | ($889,480)     | ($1,085,447)   | ($45,729)      | ($101,836)     | ($90,840)      |\n| 230 Payroll Expense              | Advertising            | 2020  | Actuals             | ($2,107,365)   | ($2,071,573)   | ($2,428,629)   | ($2,973,881)   | ($1,174,694)   | ($3,093,657)   | ($1,495,435)   |\n| 231 Travel & Entertainment Expense| Advertising           | 2020  | Actuals             | ($211,617)     | ($211,295)     | ($229,589)     | ($270,401)     | ($122,946)     | ($258,829)     | ($176,747)     |\n| 232 R&D Expense                  | Advertising            | 2020  | Actuals             | ($882,849)     | ($828,192)     | ($913,737)     | ($1,198,314)   | ($519,107)     | ($889,744)     | ($625,682)     |\n```", "query": "What is the average profit for Consulting Expense belonging to software in May, June and July?", "reference_answer": "3320351", "type": "VP"}
{"id": 69, "path": "VP/images/069.png", "ocr_result": "```\nNPR\n46\\%\t2\\%48\nPBS\n56\\%\t4\\%60\nBBC\n48\\%\t5\\%53\nNBC News\n61\\%\t6\\%67\nCBS News\n59\\%\t6\\%65\nABC News\n60\\%\t7\\%67\nNew York Times\n53\\%\t6\\%59\nTime\n46\\%\t6\\%52\nWashington Post\n47\\%\t7\\%54\nCNN\n67\\%\t10\\%77\nNewsweek\n31\\%\t5\\%36\nPolitico\n21\\%\t3\\%24\nMSNBC\n48\\%\t9\\%57\nWall Street Journal\n38\\%\t7\\%45\nUSA Today\n35\\%\t8\\%43\nUnivision\n13\\%\t3\\%16\nThe Guardian\n17\\%\t6\\%23\nBusiness Insider\n11\\%\t4\\%15\nThe Hill\n10\\%\t4\\%14\nVox\n10\\%\t6\\%16\nHuffPost\n20\\%\t14\\%34\nVice\n12\\%\t10\\%22\n0\\%\n10\\%\n20\\%\n30\\%\n40\\%\n50\\%\n60\\%\n70\\%\n80\\%\n90\\%\nShare of respondents\nTrust\nDistrust\nCollapse statistic\nAdditional Information\n\\copyright Statista 2021\nShow source\n```", "query": "What was the second most trusted political news source among Democrats?", "reference_answer": "NBC News", "type": "VP"}
{"id": 70, "path": "VP/images/070.png", "ocr_result": "None", "query": "Which animal is the hunter?", "reference_answer": "tiger", "type": "VP"}
{"id": 71, "path": "VP/images/071.png", "ocr_result": "None", "query": "Can I drive through with a high speed?", "reference_answer": "no", "type": "VP"}
{"id": 72, "path": "VP/images/072.png", "ocr_result": "```markdown\nBlue whale\nKiller whale\nLeopard seal\nSeagull\nPenguin\nElephant seal\nKrill\nFish\nSquid\nCrab\nZooplankton\nPhytoplankton\nSeaweed\n```", "query": "How many animals are at the top of the food chain?", "reference_answer": "3", "type": "VP"}
{"id": 73, "path": "VP/images/073.png", "ocr_result": "```markdown\nSpending in million GBP\n2011/12\n2012/13\n2013/14\n2014/15\n2015/16\n2016/17\n2017/18\n2018/19\n2019/20\nBBC ALBA**\nCBeebies\nCBBC\nBBC Four\nBBC Three***\nBBC Two\nBBC One\n\u00a9 Statista 2021\nAdditional Information\nShow source\n```", "query": "Which category has the highest overall Spending in million GBP?", "reference_answer": "BBC One", "type": "VP"}
{"id": 74, "path": "VP/images/074.png", "ocr_result": "None", "query": "Is it safe to proceed?", "reference_answer": "no", "type": "VP"}
{"id": 75, "path": "VP/images/075.png", "ocr_result": "None", "query": "Is her hand on the table?", "reference_answer": "No", "type": "VP"}
{"id": 76, "path": "VP/images/076.png", "ocr_result": "```\nCH $\\uparrow$ CA $\\uparrow$ HO $\\downarrow$ AD $\\uparrow$ DI $\\downarrow$ OT $\\uparrow$ HI $\\uparrow$ BL $\\downarrow$ WE $\\downarrow$ CO $\\uparrow$ MI $\\downarrow$ Avg. Rank\nkNN 0.837 0.588 3.744 0.834 0.256 0.774 0.665 0.712 2.296 0.927 0.764 $6.0 \\pm 1.7$\nDNNR (Nader et al., 2022) \u2013 0.430 3.210 \u2013 0.145 \u2013 \u2013 0.704 1.913 \u2013 0.765 $4.8 \\pm 1.9$\nDKL (Wilson et al., 2016) \u2013 0.521 3.423 \u2013 0.147 \u2013 \u2013 0.699 \u2013 \u2013 \u2013 $6.2 \\pm 0.5$\nANP (Kim et al., 2019) \u2013 0.472 3.162 \u2013 0.140 \u2013 \u2013 0.705 1.902 \u2013 \u2013 $4.6 \\pm 2.5$\nSAINT (Somepalli et al., 2021) $0.860$ 0.468 3.242 $0.860$ 0.137 0.812 0.724 0.693 1.933 $0.964$ 0.763 $3.8 \\pm 1.5$\nNPT (Kossen et al., 2021) $0.858$ 0.474 3.175 $0.853$ 0.138 0.815 0.721 0.692 1.947 $0.966$ 0.753 $3.6 \\pm 1.0$\nMLP $0.854$ 0.499 3.112 $0.853$ 0.140 0.816 0.719 0.697 1.905 $0.963$ 0.748 $3.7 \\pm 1.3$\nMLP-PLR $0.860$ 0.476 $\\mathbf{3.056}$ $0.870$ 0.134 0.819 0.729 0.687 1.860 $0.970$ 0.744 $2.0 \\pm 1.0$\nTabR-S $0.860$ 0.403 $\\mathbf{3.067}$ $0.865$ $\\mathbf{0.133}$ 0.818 0.722 0.690 1.747 $0.973$ 0.750 $1.9 \\pm 0.7$\nTabR $\\mathbf{0.862}$ 0.400 3.105 $0.870$ $\\mathbf{0.133}$ $\\mathbf{0.825}$ $\\mathbf{0.729}$ $\\mathbf{0.676}$ $\\mathbf{1.690}$ $\\mathbf{0.976}$ $\\mathbf{0.750}$ $\\mathbf{1.3 \\pm 0.6}$\n```", "query": "Which algorithm is the best according to average rank?", "reference_answer": "TabR", "type": "VP"}
{"id": 77, "path": "VP/images/077.png", "ocr_result": "```\nAggressive driver.\nAggressive pedestrian.\nTwo crash test dummies.\n```", "query": "What does this image want to warn us?", "reference_answer": "Both drivers and pedestrians should exercise caution and avoid aggressive behavior while on the road", "type": "VP"}
{"id": 78, "path": "VP/images/078.png", "ocr_result": "```\nGross domestic product in billion U.S. dollars\n2006\n0.15\n2007\n2008\n2009\n2010\n0.15\n2011\n2012\n0.16\n2013\n0.17\n2014\n0.18\n2015\n2016\n0.19\n2017\n0.19\n2018\n0.21\n2019\n0.22\n2020*\n0.24\n2021*\n0.23\n2022*\n0.23\n2023*\n0.25\n2024*\n0.26\n2025*\n0.27\n2026*\n0.28\n0.125\n0.15\n0.175\n0.2\n0.225\n0.25\n0.275\n0.3\n\u00a9 Statista 2021\nAdditional Information\nShow source\n```", "query": "What was the Marshall Islands' gross domestic product in 2019?", "reference_answer": "0.24", "type": "VP"}
{"id": 79, "path": "VP/images/079.png", "ocr_result": "```markdown\nDataset 1\n\nDepartment | Name | Salary\n---------------------------\nAdministration | Emily | $2,000\nFinance | Nick | $1,800\nMarketing | John | $2,600\nMarketing | Gloria | $1,800\nAdministration | Jane | $2,500\nFinance | Max | $2,000\nAdministration | Tyler | $3,000\nFinance | Wilkins | $2,500\nMarketing | Miles | $2,800\nAdministration | Sabine | $1,900\n```", "query": "Which department has the highest average salary?", "reference_answer": "maketing", "type": "VP"}
{"id": 80, "path": "VP/images/080.png", "ocr_result": "None", "query": "Which one is the longest used by Chinese people?", "reference_answer": "chopstick", "type": "VP"}
{"id": 81, "path": "VP/images/081.png", "ocr_result": "```markdown\nDALYs from mental health and substance use disorder by age, Angola, 1990 to 2010\nDALYs (Disability-Adjusted Life Years) rate by age, measured per 100,000 individuals. DALYs are used to measure total burden of disease - both from years of life lost and years lived with a disability. One DALY equals one lost year of healthy life.\n50\u201369 years old\n15-49 years old\n70+ years old\nAge-standardized\nAll ages\n5-14 years old\nUnder-5s\nSource: IHME, Global Burden of Disease\nCC BY\n```", "query": "Is the value of 50-69 years old always larger than the value of 15-49 years old?", "reference_answer": "no", "type": "VP"}
{"id": 82, "path": "VP/images/082.png", "ocr_result": "```markdown\n$$\\text{Dearms GONDOLA 2}$$\n$$\\text{\u30d7\u30ea\u30f3\u30b9\u7b2c\uff12\u30b4\u30f3\u30c9\u30e9\u30ea\u30d5\u30c8\u4e57\u308a\u5834}$$\n```", "query": "what will happen if the person strips naked?", "reference_answer": "He will feel very cold", "type": "VP"}
{"id": 83, "path": "VP/images/083.png", "ocr_result": "```\n#Set radius for calculate circle area\nradius = 20\n\n#Caclculat Area of circle\narea = 3.14 * radius * radius\n\n#print Area of circle\nprint(\"The Area of Circle : \", area)\n```", "query": "What's the output of it?", "reference_answer": "1256", "type": "VP"}
{"id": 84, "path": "VP/images/084.png", "ocr_result": "```\nDK\nThe\nDisney\nBOOK\nA Celebration of the Worlds of Disney\nNEW EDITION\n```", "query": "Is it new?", "reference_answer": "yes", "type": "VP"}
{"id": 85, "path": "VP/images/085.png", "ocr_result": "```\nid  city    sales volume  unit price  profit margin\n1   beijing 100     125    0.15\n2   Seattle 200     22     0.17\n3   chengdu 312     347    0.19\n4   Austin  421     327    0.21\n5   Manaus  235     236    0.22\n6   shanghai        452    23      0.15\n7   beijing 125     121    0.11\n8   Miami   235     235    0.12\n9   guangzhou       458    2       0.25\n10  shanghai        251    126     0.22\n11  Manaus  758     234    0.16\n12  Miami   237     117    0.19\n```", "query": "What is the total profit from the goods sold in China?", "reference_answer": "32855.03", "type": "VP"}
{"id": 86, "path": "VP/images/086.png", "ocr_result": "```\n\u97e9\u56fd\u4eba\u5403\u996d,\u97e9\u56fd\u4eba\u5403\u996d\u793c\u4eea\n```", "query": "How many pairs of chopsticks are needed?", "reference_answer": "9", "type": "VP"}
{"id": 87, "path": "VP/images/087.png", "ocr_result": "None", "query": "What's unusual?", "reference_answer": "A cat sits in the sink", "type": "VP"}
{"id": 88, "path": "VP/images/088.png", "ocr_result": "```markdown\n3 mins for washing one dish\n```", "query": "How much time is needed for washing theses dishes?", "reference_answer": "24 mins", "type": "VP"}
{"id": 89, "path": "VP/images/089.png", "ocr_result": "```markdown\nSentry\n\n1:1:28\n```", "query": "What's the time?", "reference_answer": "11:28", "type": "VP"}
{"id": 90, "path": "VP/images/090.png", "ocr_result": "None", "query": "What will most likely happen after the person takes this photo?", "reference_answer": "eat the food", "type": "VP"}
{"id": 91, "path": "VP/images/091.png", "ocr_result": "None", "query": "What's the time?", "reference_answer": "0:30", "type": "VP"}
{"id": 92, "path": "VP/images/092.png", "ocr_result": "```markdown\n# Plastic Waste is Out of Control\n## In 2015, humans threw out almost as much plastic as they made.\n\n### Plastic made (metric tonnes)                          Plastic thrown out (metric tonnes)\nIndustrial Machines            3M                                     1M\nElectronics                    18M                                    13M\nTransportation                 27M                                    17M\nConsumer Products              42M                                    37M\nOther                          47M                                    38M\nTextiles                       59M                                    42M\nConstruction                   65M                                    13M\nPackaging                      146M                                   141M\nTotal                          407M                                   302M\n\nIn 2015, humans produced [407 million metric tons of new plastic](https://ourworldindata.org/plastic-pollution), continuing the trend of making more and more plastic each year. Meanwhile, [302 million metric tons was discarded as waste](https://ourworldindata.org/plastic-pollution), meaning it wasn\u2019t recycled or incinerated; it\u2019s just sitting in a dump or the ocean somewhere.\n```", "query": "Which manufactured category of plastic has the most amount produced minus the amount discarded?", "reference_answer": "Construction", "type": "VP"}
{"id": 93, "path": "VP/images/093.png", "ocr_result": "```markdown\nRepublicans and Democrats take similar views of fairness of tax system\n% who say the federal tax system is very or moderately fair ...\n\nRep/Lean Rep\n56\n57\n49\n56\n45\n41\n41\nDem/Lean Dem\n41\n43\n43\n40\n43\n41\n\n1997\n2002\n2007\n2012\n2017\n\nNotes: 1997 and 2010 data from CNN; 2003 data from NPR. Q45.\nSource: Survey conducted Oct. 25-30, 2017.\n\nPEW RESEARCH CENTER\n```", "query": "The median of Democrats' opinion minus the smaller mode of Republicans' opinion equals to what?", "reference_answer": "5", "type": "VP"}
{"id": 94, "path": "VP/images/094.png", "ocr_result": "```markdown\n$(55714 * 53321)/22222$\n```", "query": "What's the result?", "reference_answer": "133684.01", "type": "VP"}
{"id": 95, "path": "VP/images/095.png", "ocr_result": "```\nModels                                         #Trainable        #Total                VQAv2                        OK-VQA                GQA\n                                                    Params           Params                val            test-dev                test           test-dev\n\\hline\nVL-T5$_{no-vqa}$                           224M               269M                 13.5                  -                          5.8                     6.3\nFewVLM (Jin et al., 2022)                 740M               785M                 47.7                 -                         16.5                  29.3\nFrozen (Tsimpoukelli et al., 2021)        40M               7.1B                  29.6                  -                          5.9                    -\nVLKD (Dai et al., 2022)                      406M               832M                 42.6                44.5                     13.3                    -\nFlamingo3B (Alayrac et al., 2022)          1.4B                3.2B                     -                   49.2                      41.2                    -\nFlamingo9B (Alayrac et al., 2022)          1.8B                9.3B                     -                   51.8                      44.7                    -\nFlamingo80B (Alayrac et al., 2022)       10.2B                80B                     -                   56.3                      50.6                     -\n\\hline\nBLIP-2 ViT-L OPT$_{2.7B}$                104M               3.1B                  50.1                  49.7                     30.2                  33.9\nBLIP-2 ViT-g OPT$_{2.7B}$                107M               3.8B                  53.5                  52.3                     31.7                  34.6\nBLIP-2 ViT-g OPT$_{6.7B}$                108M               7.8B                  54.3                  52.6                     36.4                  36.4\nBLIP-2 ViT-L FlanT5$_{XL}$                103M               3.4B                  62.6                  62.3                     39.4                  44.4\nBLIP-2 ViT-g FlanT5$_{XL}$                107M               4.1B                  63.1                  63.0                     40.7                  44.2\nBLIP-2 ViT-g FlanT5$_{XXL}$               108M               12.1B                 65.2                 65.0                      45.9                  44.7\n```", "query": "Which algorithm has the highest performance on OK-VQA?", "reference_answer": "Flamingo80B", "type": "VP"}
{"id": 96, "path": "VP/images/096.png", "ocr_result": "```markdown\nLOS GIG CITY COPENHAG\n```", "query": "Is it raining?", "reference_answer": "No", "type": "VP"}
{"id": 97, "path": "VP/images/097.png", "ocr_result": "```markdown\nIT | Research & Development | Female | Black | 55 | 2016/4/8 | $141,604 | 15% | Seattle\nIT | Manufacturing | Male | Asian | 59 | 1997/11/29 | $99,975 | 0% | Chongqing\nFinance | Speciality Products | Female | Caucasian | 50 | 2006/10/26 | $163,099 | 20% | Chicago\nIT | Manufacturing | Female | Caucasian | 26 | 2019/9/27 | $84,913 | 7% | Chicago\nFinance | Manufacturing | Male | Asian | 55 | 1995/11/20 | $95,409 | 0% | Phoenix\nSales | Corporate | Male | Asian | 57 | 2017/1/24 | $50,994 | 0% | Chongqing\nIT | Corporate | Female | Caucasian | 27 | 2020/7/1 | $119,746 | 10% | Phoenix\nFinance | Manufacturing | Male | Black | 25 | 2020/5/16 | $41,336 | 0% | Miami\nAccounting | Manufacturing | Male | Caucasian | 29 | 2019/1/25 | $113,527 | 6% | Austin\nFinance | Speciality Products | Female | Caucasian | 34 | 2018/6/13 | $77,203 | 0% | Chicago\nHuman Resources | Manufacturing | Female | Asian | 36 | 2009/2/11 | $157,333 | 15% | Miami\nEngineering | Speciality Products | Female | Caucasian | 27 | 2021/10/21 | $109,851 | 0% | Seattle\nHuman Resources | Manufacturing | Male | Caucasian | 59 | 1999/3/14 | $105,086 | 9% | Austin\nFinance | Research & Development | Female | Asian | 51 | 2021/6/10 | $146,742 | 10% | Shanghai\n```", "query": "What is the average income of all people among IT workers in China?", "reference_answer": "99975", "type": "VP"}
{"id": 98, "path": "VP/images/098.png", "ocr_result": "```markdown\nShanghai -- China Trip by wiwinn.wr | 23$^{rd}$ May 2012\n```", "query": "Who broke the traffic rules?", "reference_answer": "The man on the bike", "type": "VP"}
{"id": 99, "path": "VP/images/099.png", "ocr_result": "```\nINCOMING INFORMATION\n\nSatellite\n\nRadar\n\nDigital buoy\n\nANALYSIS & FORECASTING\n\nSatellite photo\n\nRadar screen\n\nSynoptic chart\n\nPREPARING THE BROADCAST\n\nBROADCAST\n\nTV newsreader\n\nRadio\n\nRecorded announcement\n```", "query": "How many devices are directly connected to the satellite?", "reference_answer": "2", "type": "VP"}
{"id": 100, "path": "VP/images/100.png", "ocr_result": "None", "query": "What is the third game?", "reference_answer": "CrazyRacing KartRider", "type": "VP"}
{"id": 101, "path": "VP/images/101.png", "ocr_result": "None", "query": "Is it healthy?", "reference_answer": "Yes", "type": "VP"}
{"id": 102, "path": "VP/images/102.png", "ocr_result": "None", "query": "How many can four people eat on average?", "reference_answer": "4", "type": "VP"}
{"id": 103, "path": "VP/images/103.png", "ocr_result": "```\nSuncoast Pkwy\n```", "query": "Can I go left?", "reference_answer": "No", "type": "VP"}
{"id": 104, "path": "VP/images/104.png", "ocr_result": "**ATTENTION!**\n**ALL VISITORS**\n\nDo not enter unless authorised by staff\n\nNO SMOKING\n\nNo eating or drinking\n\nNo naked lights", "query": "How many things are prohibited here?", "reference_answer": "4", "type": "VP"}
{"id": 105, "path": "VP/images/105.png", "ocr_result": "```markdown\nWOW!\nBest Foods\nReal Mayo Easy Out\n22 Ounce\n2/$3.00\nStater Brothers Price: $3.99\n```", "query": "How many barrels can I buy for $ 6?", "reference_answer": "4", "type": "VP"}
{"id": 106, "path": "VP/images/106.png", "ocr_result": "There are two pizza boxes and two cans of Coca-Cola on the table.", "query": "From the amount of food, how many people are eating here?", "reference_answer": "2", "type": "VP"}
{"id": 107, "path": "VP/images/107.png", "ocr_result": "| City Planned    |  Completion rate | note                        |\n|-----------------|------------------|-----------------------------|\n| Beijing         | 100%             | Completed on Sep. 12, 2009  |\n| Seoul           | 100%             | Completed on Dec. 28, 2007  |\n| Washington D.C. | 100%             | Completed in 1998           |\n| London          | 100%             | Completed in 1986           |", "query": "Which city was the first to achieve the goal of building a road?", "reference_answer": "London", "type": "VP"}
{"id": 108, "path": "VP/images/108.png", "ocr_result": "- The chart title is \"A dual bar chart to show the eye colour of Year 7 and Year 8 students.\"\n- Year 7 is represented by the color orange.\n- Year 8 is represented by the color purple.\n- The x-axis is labeled \"Eye colour\" with categories: Green, Blue, Brown.\n- The y-axis is labeled \"Frequency\" ranging from 0 to 40.\n\n  Year 7:\n  - Green: 22\n  - Blue: 34\n  - Brown: 10", "query": "How many seventh-graders here don't have brown eyes?", "reference_answer": "76", "type": "VP"}
{"id": 109, "path": "VP/images/109.png", "ocr_result": "Number of participants per game:\n- Candyland: 23%\n- Monopoly: 21%\n- Twister: 19%\n- Chess: 15%\n- Jenga: 11%\n- Poker: 7%\n- Uno: 4%", "query": "Which two competitions are the most attended?", "reference_answer": "Candyland and Twister", "type": "VP"}
{"id": 110, "path": "VP/images/110.png", "ocr_result": "### Extracted Context:\n\n1. ![shapes](https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/png/1f4dd.png) + ![shapes](https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/png/1f4dd.png) + ![shapes](https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/png/1f4dd.png) = 45\n2. ![banana bunch](https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/png/1f34c.png) + ![banana bunch](https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/png/1f34c.png) + ![shapes](https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/png/1f4dd.png) = 23\n3. ![banana bunch](https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/png/1f34c.png) + ![clock](https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/png/23f0.png) + ![clock](https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/png/23f0.png) = 10\n4. ![clock](https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/png/23f0.png) + ![banana bunch](https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/png/1f34c.png) + ![banana bunch](https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/png/1f34c.png) x ![shapes](https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/png/1f4dd.png) = ?\n\n(Note: The image contains visual representations of hexagonal shapes, bananas, and clocks, with their corresponding mathematical equations.)", "query": "What's the result?", "reference_answer": "26", "type": "VP"}
{"id": 111, "path": "VP/images/111.png", "ocr_result": "- 8 lanes\n- 6 lanes\n- 4 lanes\n- 2 lanes\n- Not in service", "query": "How many sections of 4 lanes?", "reference_answer": "7", "type": "VP"}
{"id": 112, "path": "VP/images/112.png", "ocr_result": "```markdown\nUSA Sales in USD\n8420.28 Smith\n12020.8 Johnson\n15135.4 Williams\n19027.7 Jones\n16716.3 Brown\n```", "query": "Who has the highest sales in the US?", "reference_answer": "Brown", "type": "VP"}
{"id": 113, "path": "VP/images/113.png", "ocr_result": "**Sales in Each Quarter:**\n\n**Jan'2018:**\n- ABC Mutton: $2,667.60\n- Crab Meat: $1,768.41\n- Camembert Pierrot: $3,182.40\n- Ipoh Coffee: $1,398.40\n- Hot Pepper Sauce: $1,347.36\n- Hot Spiced Okra: $1,509.60\n- Mozzarella di Giovanni: $1,390.00\n- Sir Rodney's Scones: $1,462.00\n- Steeleye Stout: $1,310.40\n- Veggie-spread: $3,202.87\n\n**April'2018:**\n- ABC Mutton: $4,013.10\n- Crab Meat: $1,978.00\n- Camembert Pierrot: $4,683.50\n- Ipoh Coffee: $4,496.50\n- Hot Pepper Sauce: $2,750.69\n- Hot Spiced Okra: $530.40\n- Mozzarella di Giovanni: $4,488.20\n- Sir Rodney's Scones: $644.00\n- Steeleye Stout: $1,368.00\n- Veggie-spread: $263.40\n\n**July'2018:**\n- ABC Mutton: $4,836.00\n- Crab Meat: $4,412.32\n- Camembert Pierrot: $9,579.50\n- Ipoh Coffee: $1,196.00\n- Hot Pepper Sauce: $1,375.62\n- Hot Spiced Okra: $68.00\n- Mozzarella di Giovanni: $3,027.60\n- Sir Rodney's Scones: $1,733.00\n- Steeleye Stout: $1,323.00\n- Veggie-spread: $842.88\n\n**October'2018:**\n- ABC Mutton: $6,087.90\n- Crab Meat: $1,656.00\n- Camembert Pierrot: $3,060.00\n- Ipoh Coffee: $3,979.00\n- Hot Pepper Sauce: $3,899.51\n- Hot Spiced Okra: $850.00\n- Mozzarella di Giovanni: $2,697.00\n- Sir Rodney's Scones: $1,434.00\n- Steeleye Stout: $1,273.50\n- Veggie-spread: $2,590.10", "query": "Which month had the highest sales?", "reference_answer": "July", "type": "VP"}
{"id": 114, "path": "VP/images/114.png", "ocr_result": "LIVING ROOM\n14'6'' x 20'5''", "query": "How many square feet is the living room?", "reference_answer": "Approximately 296 square feet.", "type": "VP"}
{"id": 115, "path": "VP/images/115.png", "ocr_result": "The relevant information from the image and OCR result:\n\n- Russia\n- Canada\n- China\n- United States of America\n- Brazil\n- Australia", "query": "Which country has the largest land area on this map?", "reference_answer": "Russia", "type": "VP"}
{"id": 116, "path": "VP/images/116.png", "ocr_result": "- Windows 2.x\n  - Year: 1987\n  - Specific features: \n    - Supports to minimize or maximize windows.", "query": "Which windows operating system earliest supports maximum and minimum windows?", "reference_answer": "windows2.x", "type": "VP"}
